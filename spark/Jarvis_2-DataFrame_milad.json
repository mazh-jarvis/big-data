{"paragraphs":[{"text":"%md\n## Learning Dataset/DataFrame\nReadings: \n\n- `Spark - The Definitive Guide` chapter 3 - 10\n- The official document https://spark.apache.org/docs/2.3.3/sql-programming-guide.html","user":"anonymous","dateUpdated":"2019-10-15T14:57:14+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Learning Dataset/DataFrame</h2>\n<p>Readings: </p>\n<ul>\n  <li><code>Spark - The Definitive Guide</code> chapter 3 - 10</li>\n  <li>The official document <a href=\"https://spark.apache.org/docs/2.3.3/sql-programming-guide.html\">https://spark.apache.org/docs/2.3.3/sql-programming-guide.html</a></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1570548466375_-1453420799","id":"20191007-143023_835288946","dateCreated":"2019-10-08T15:27:46+0000","dateStarted":"2019-10-15T14:57:14+0000","dateFinished":"2019-10-15T14:57:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:321"},{"text":"%md\n### Creating Dataframes\n#### Creating Dataframes from Scala `Seq`\n\nWe can convert a Sequence of Tuples to a Spark DF.\ne.g. Seq[(String, Double, String, String)] \n\nA tuple corresponds to a DF row.\nA element in a tuple corresponds to a column to a particular row.","user":"anonymous","dateUpdated":"2019-10-15T14:57:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Creating Dataframes</h3>\n<h4>Creating Dataframes from Scala <code>Seq</code></h4>\n<p>We can convert a Sequence of Tuples to a Spark DF.<br/>e.g. Seq[(String, Double, String, String)] </p>\n<p>A tuple corresponds to a DF row.<br/>A element in a tuple corresponds to a column to a particular row.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1570548466388_-953632780","id":"20190519-201210_1157722001","dateCreated":"2019-10-08T15:27:46+0000","dateStarted":"2019-10-15T14:57:20+0000","dateFinished":"2019-10-15T14:57:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:322"},{"text":"%md\n#### Scala Implicit Conversions\n\nIn short, you have to `import spark.implicits._` to convert/cast a `Seq[(String, Double, String, String)]` to a Spark `DataFrame`. (e.g. `lineTupleSeq.toDF`)\n\n#####  (Advanced)\nThis is called implicit conversions in Scala. In this case, `spark.implicits.localSeqToDatasetHolder` creates a Dataset from a local Seq.\n\nSpark Scala Docs:\n- <a href=\"https://spark.apache.org/docs/2.3.0/api/scala/index.html#org.apache.spark.sql.SparkSession$implicits$@localSeqToDatasetHolder[T](s:Seq[T])(implicitevidence$7:org.apache.spark.sql.Encoder[T]):org.apache.spark.sql.DatasetHolder[T]\" target=\"_blank\">implicits.localSeqToDatasetHolder</a>\n- <a href=\"http://spark.apache.org/docs/2.3.0/api/scala/index.html#org.apache.spark.sql.DatasetHolder@toDF(colNames:String*):org.apache.spark.sql.DataFrame\" target=\"_blank\">DatasetHolder</a>","user":"anonymous","dateUpdated":"2019-10-15T14:57:20+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Scala Implicit Conversions</h4>\n<p>In short, you have to <code>import spark.implicits._</code> to convert/cast a <code>Seq[(String, Double, String, String)]</code> to a Spark <code>DataFrame</code>. (e.g. <code>lineTupleSeq.toDF</code>)</p>\n<h5>(Advanced)</h5>\n<p>This is called implicit conversions in Scala. In this case, <code>spark.implicits.localSeqToDatasetHolder</code> creates a Dataset from a local Seq.</p>\n<p>Spark Scala Docs:<br/>- <a href=\"https://spark.apache.org/docs/2.3.0/api/scala/index.html#org.apache.spark.sql.SparkSession$implicits$@localSeqToDatasetHolder[T](s:Seq[T])(implicitevidence$7:org.apache.spark.sql.Encoder[T]):org.apache.spark.sql.DatasetHolder[T]\" target=\"_blank\">implicits.localSeqToDatasetHolder</a><br/>- <a href=\"http://spark.apache.org/docs/2.3.0/api/scala/index.html#org.apache.spark.sql.DatasetHolder@toDF(colNames:String*):org.apache.spark.sql.DataFrame\" target=\"_blank\">DatasetHolder</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1570548466389_-1263577688","id":"20190520-102917_1809142825","dateCreated":"2019-10-08T15:27:46+0000","dateStarted":"2019-10-15T14:57:20+0000","dateFinished":"2019-10-15T14:57:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:323"},{"text":"/**\n * Each line/record/row must be a Tuple\n * e.g.  Tuple(AAPL,110.5,2018-02-01,Apple)\n * \n * Lines are grouped into a Seq\n * List(\n *   (AAPL,110.5,2018-02-01,Apple),\n *   (AMZN,1500.52,2018-02-01,Ammazon.com),\n *   (FB,170.01,2018-02-01,Facebook)\n * )\n */\nval lineTuple1 = (\"AAPL\",110.5,\"2018-02-01\",\"Apple\")\nval lineTuple2 = (\"AMZN\",1500.52,\"2018-02-01\",\"Ammazon.com\")\nval lineTuple3 = (\"FB\",170.01,\"2018-02-01\",\"Facebook\")\nval lineTupleSeq = Seq(lineTuple1,lineTuple2,lineTuple3)\n\n//To use toDF, you must import this (see next section for details)\n//In fact Zeppellin interpreter already imported this for you\nimport spark.implicits._\nval stockDf = lineTupleSeq.toDF(\"ticker\",\"price\", \"date\", \"companyName\")\nstockDf.printSchema\n\n//SELECT * FROM stock LIMIT 3\nstockDf.show(3)\n\n//SELECT companyName AS company_name, price FROM stock\nstockDf.select(col(\"companyName\").as(\"company_name\"), col(\"price\")).show()\n\n","user":"anonymous","dateUpdated":"2019-10-15T14:57:20+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"lineTuple1: (String, Double, String, String) = (AAPL,110.5,2018-02-01,Apple)\nlineTuple2: (String, Double, String, String) = (AMZN,1500.52,2018-02-01,Ammazon.com)\nlineTuple3: (String, Double, String, String) = (FB,170.01,2018-02-01,Facebook)\nlineTupleSeq: Seq[(String, Double, String, String)] = List((AAPL,110.5,2018-02-01,Apple), (AMZN,1500.52,2018-02-01,Ammazon.com), (FB,170.01,2018-02-01,Facebook))\nimport spark.implicits._\nstockDf: org.apache.spark.sql.DataFrame = [ticker: string, price: double ... 2 more fields]\nroot\n |-- ticker: string (nullable = true)\n |-- price: double (nullable = false)\n |-- date: string (nullable = true)\n |-- companyName: string (nullable = true)\n\n+------+-------+----------+-----------+\n|ticker|  price|      date|companyName|\n+------+-------+----------+-----------+\n|  AAPL|  110.5|2018-02-01|      Apple|\n|  AMZN|1500.52|2018-02-01|Ammazon.com|\n|    FB| 170.01|2018-02-01|   Facebook|\n+------+-------+----------+-----------+\n\n+------------+-------+\n|company_name|  price|\n+------------+-------+\n|       Apple|  110.5|\n| Ammazon.com|1500.52|\n|    Facebook| 170.01|\n+------------+-------+\n\n"}]},"apps":[],"jobName":"paragraph_1570548466394_-1073185837","id":"20190519-201416_412351679","dateCreated":"2019-10-08T15:27:46+0000","dateStarted":"2019-10-15T14:57:21+0000","dateFinished":"2019-10-15T14:58:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:324"},{"text":"%md\n### Creating DF from CSV Files","user":"anonymous","dateUpdated":"2019-10-15T14:58:04+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Creating DF from CSV Files</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1570548466396_210342098","id":"20190520-104920_1833330750","dateCreated":"2019-10-08T15:27:46+0000","dateStarted":"2019-10-15T14:58:05+0000","dateFinished":"2019-10-15T14:58:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:325"},{"text":"//Read CSV file to df\n//local or hdfs path\n//val path = \"/user/milad/datasets/online_retail/online-retail-dataset_clean.txt\"\nval path = \"/user/milad/datasets/online_retail/online-retail-dataset.csv\"\n\n//spark.read is able to handle csv formats\nval retailDf = spark.read.format(\"csv\").\n    option(\"header\", \"true\").\n    option(\"inferSchema\", \"true\").\n    load(path)\n\n\nretailDf.printSchema\nretailDf.show(3)\nretailDf.show(3,false)","user":"anonymous","dateUpdated":"2019-10-15T15:15:49+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"path: String = /user/milad/datasets/online_retail/online-retail-dataset.csv\nretailDf: org.apache.spark.sql.DataFrame = [InvoiceNo: string, StockCode: string ... 6 more fields]\nroot\n |-- InvoiceNo: string (nullable = true)\n |-- StockCode: string (nullable = true)\n |-- Description: string (nullable = true)\n |-- Quantity: integer (nullable = true)\n |-- InvoiceDate: string (nullable = true)\n |-- UnitPrice: double (nullable = true)\n |-- CustomerID: integer (nullable = true)\n |-- Country: string (nullable = true)\n\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|   InvoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|12/1/2010 8:26|     2.55|     17850|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|\n|   536365|   84406B|CREAM CUPID HEART...|       8|12/1/2010 8:26|     2.75|     17850|United Kingdom|\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\nonly showing top 3 rows\n\n+---------+---------+----------------------------------+--------+--------------+---------+----------+--------------+\n|InvoiceNo|StockCode|Description                       |Quantity|InvoiceDate   |UnitPrice|CustomerID|Country       |\n+---------+---------+----------------------------------+--------+--------------+---------+----------+--------------+\n|536365   |85123A   |WHITE HANGING HEART T-LIGHT HOLDER|6       |12/1/2010 8:26|2.55     |17850     |United Kingdom|\n|536365   |71053    |WHITE METAL LANTERN               |6       |12/1/2010 8:26|3.39     |17850     |United Kingdom|\n|536365   |84406B   |CREAM CUPID HEARTS COAT HANGER    |8       |12/1/2010 8:26|2.75     |17850     |United Kingdom|\n+---------+---------+----------------------------------+--------+--------------+---------+----------+--------------+\nonly showing top 3 rows\n\n"}]},"apps":[],"jobName":"paragraph_1570548466396_397995737","id":"20190520-095229_630927102","dateCreated":"2019-10-08T15:27:46+0000","dateStarted":"2019-10-15T15:15:49+0000","dateFinished":"2019-10-15T15:15:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:326","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=24","http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=25","http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=26","http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=27"],"interpreterSettingId":"spark"}}},{"text":"%md\n#### Column Type Cast\nIn `retailDf` schema, `InvoiceDate` column data type is string. \n\nIn this practice, you need to cast `InvoiceDate` column to a Spark `timestamp` data type\n\n```bash\nresultDf.printSchema\nroot\n |-- InvoiceNo: string (nullable = true)\n |-- StockCode: string (nullable = true)\n |-- Description: string (nullable = true)\n |-- Quantity: integer (nullable = true)\n |-- InvoiceDate: timestamp (nullable = true) #cast string to timestamp\n |-- UnitPrice: double (nullable = true)\n |-- CustomerID: integer (nullable = true)\n |-- Country: string (nullable = true)\n```\n","user":"anonymous","dateUpdated":"2019-10-15T14:58:20+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Column Type Cast</h4>\n<p>In <code>retailDf</code> schema, <code>InvoiceDate</code> column data type is string. </p>\n<p>In this practice, you need to cast <code>InvoiceDate</code> column to a Spark <code>timestamp</code> data type</p>\n<pre><code class=\"bash\">resultDf.printSchema\nroot\n |-- InvoiceNo: string (nullable = true)\n |-- StockCode: string (nullable = true)\n |-- Description: string (nullable = true)\n |-- Quantity: integer (nullable = true)\n |-- InvoiceDate: timestamp (nullable = true) #cast string to timestamp\n |-- UnitPrice: double (nullable = true)\n |-- CustomerID: integer (nullable = true)\n |-- Country: string (nullable = true)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1570548466397_-1540744380","id":"20190520-085947_2007764287","dateCreated":"2019-10-08T15:27:46+0000","dateStarted":"2019-10-15T14:58:21+0000","dateFinished":"2019-10-15T14:58:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:327"},{"text":"import org.apache.spark.sql.functions.to_timestamp\nval FMT = \"MM/dd/yy H:mm\"\nval retailCastDf = retailDf.withColumn(\"invoiceDate\", to_timestamp(retailDf(\"InvoiceDate\"), FMT))\nretailCastDf.printSchema\n\nretailCastDf.show(3)","user":"anonymous","dateUpdated":"2019-10-15T15:16:02+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions.to_timestamp\nFMT: String = MM/dd/yy H:mm\nretailCastDf: org.apache.spark.sql.DataFrame = [InvoiceNo: string, StockCode: string ... 6 more fields]\nroot\n |-- InvoiceNo: string (nullable = true)\n |-- StockCode: string (nullable = true)\n |-- Description: string (nullable = true)\n |-- Quantity: integer (nullable = true)\n |-- invoiceDate: timestamp (nullable = true)\n |-- UnitPrice: double (nullable = true)\n |-- CustomerID: integer (nullable = true)\n |-- Country: string (nullable = true)\n\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|        invoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|2010-12-01 08:26:00|     2.55|     17850|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|2010-12-01 08:26:00|     3.39|     17850|United Kingdom|\n|   536365|   84406B|CREAM CUPID HEART...|       8|2010-12-01 08:26:00|     2.75|     17850|United Kingdom|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\nonly showing top 3 rows\n\n"}]},"apps":[],"jobName":"paragraph_1570664123172_1474027640","id":"20191009-233523_1741676923","dateCreated":"2019-10-09T23:35:23+0000","dateStarted":"2019-10-15T15:16:02+0000","dateFinished":"2019-10-15T15:16:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:328","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=28"],"interpreterSettingId":"spark"}}},{"text":"//Cache DF in memory since it will be accessed frequently\nretailCastDf.cache\n","user":"anonymous","dateUpdated":"2019-10-15T14:58:24+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res24: retailCastDf.type = [InvoiceNo: string, StockCode: string ... 6 more fields]\n"}]},"apps":[],"jobName":"paragraph_1570548466398_-624687758","id":"20190519-215300_721200493","dateCreated":"2019-10-08T15:27:46+0000","dateStarted":"2019-10-15T14:58:24+0000","dateFinished":"2019-10-15T14:58:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:329"},{"text":"%md\n### DataFrame SELECT\nImplement the following SQL queries using dataframe. Compare different select syntax.\n\n```sql\nSELECT *\nFROM retail\nLIMIT 3\n\nSELECT InvoiceNo\nFROM retail\n\nSELECT InvoiceNo as invoiceNo\nFROM retail\n\nSELECT max(UnitPrice) as max_unit_price\nFROM retail\n```","user":"anonymous","dateUpdated":"2019-10-15T14:58:25+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>DataFrame SELECT</h3>\n<p>Implement the following SQL queries using dataframe. Compare different select syntax.</p>\n<pre><code class=\"sql\">SELECT *\nFROM retail\nLIMIT 3\n\nSELECT InvoiceNo\nFROM retail\n\nSELECT InvoiceNo as invoiceNo\nFROM retail\n\nSELECT max(UnitPrice) as max_unit_price\nFROM retail\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1570548466399_-1735076365","id":"20190519-221054_1925024171","dateCreated":"2019-10-08T15:27:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:330","dateFinished":"2019-10-15T14:58:25+0000","dateStarted":"2019-10-15T14:58:25+0000"},{"text":"/*\n//SELECT * from retail limit 1;\nretailCastDf.show(1)\nimport org.apache.spark.sql.functions._\n//select InvoiceNo,CustomerID,Country from retail limit 1;\nretailCastDf.select(\"InvoiceNo\").show(1)\n\n//Different ways of select \nretailCastDf.select($\"InvoiceNo\").show(1)\nretailCastDf.select('InvoiceNo).show(1)\nretailCastDf.select(col(\"InvoiceNo\")).show(1)\nretailCastDf.select(retailCastDf.col(\"InvoiceNo\")).show(1)\nretailCastDf.select(expr(\"InvoiceNo\")).show(1)\n\n//ERROR: cannot mix \n//retailCastDf.select($\"InvoiceNo\", \"StockCode\").show(1)\n\n//expr or selectExpr is most powerful and close to SQL syntax\n//SELECT InvoiceNo as invoiceId from retail limit 1;\nretailCastDf.select(expr(\"InvoiceNo as invoiceId\")).show(1)\nretailCastDf.selectExpr(\"InvoiceNo as invoiceId\").show(1)\n\n//SELECT * from retail limit 1;\nretailCastDf.selectExpr(\"*\").show(1)\n\n//select max(UnitPrice) as maxUnitPrice from retail\nretailCastDf.selectExpr(\"max(UnitPrice) as maxUnitPrice\").show \n\n*/","user":"anonymous","dateUpdated":"2019-10-15T14:58:25+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":11,"editorMode":"ace/mode/scala","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":98.011,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1570548466399_-1353497372","id":"20190519-211701_1956303781","dateCreated":"2019-10-08T15:27:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:331","dateFinished":"2019-10-15T14:58:26+0000","dateStarted":"2019-10-15T14:58:25+0000"},{"text":"%md\n### DataFrame filtering (WHERE)\n\nImplement the following SQL quries\n\n```sql\nSELECT *\nFROM retail\nWHERE InvoiceNo = 536365\nLIMIT 2\n```\n\nSample results\n```\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|        InvoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|2010-12-01 08:26:00|     2.55|     17850|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|2010-12-01 08:26:00|     3.39|     17850|United Kingdom|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\nonly showing top 2 rows\n```","user":"anonymous","dateUpdated":"2019-10-15T14:58:26+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>DataFrame filtering (WHERE)</h3>\n<p>Implement the following SQL quries</p>\n<pre><code class=\"sql\">SELECT *\nFROM retail\nWHERE InvoiceNo = 536365\nLIMIT 2\n</code></pre>\n<p>Sample results</p>\n<pre><code>+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|        InvoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|2010-12-01 08:26:00|     2.55|     17850|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|2010-12-01 08:26:00|     3.39|     17850|United Kingdom|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\nonly showing top 2 rows\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1570548466400_751928792","id":"20190519-221114_648626738","dateCreated":"2019-10-08T15:27:46+0000","dateStarted":"2019-10-15T14:58:26+0000","dateFinished":"2019-10-15T14:58:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:332"},{"text":"retailCastDf.where($\"InvoiceNo\" === 536365).show(2)","user":"anonymous","dateUpdated":"2019-10-15T14:58:26+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|        invoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|2010-12-01 08:26:00|     2.55|     17850|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|2010-12-01 08:26:00|     3.39|     17850|United Kingdom|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\nonly showing top 2 rows\n\n"}]},"apps":[],"jobName":"paragraph_1570548466401_-643543776","id":"20190519-201625_2028882244","dateCreated":"2019-10-08T15:27:46+0000","dateStarted":"2019-10-15T14:58:26+0000","dateFinished":"2019-10-15T14:58:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:333","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=5"],"interpreterSettingId":"spark"}}},{"user":"anonymous","dateUpdated":"2019-10-15T14:58:32+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1570548466402_-1292323183","id":"20191007-145852_244125478","dateCreated":"2019-10-08T15:27:46+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:334"},{"text":"%md\n\n### DF Exercises\n#### Spark SQL temp view\nFor the following DF exercises, instead of jumping right into DF solutions, you can write `sql` solutions and verify with Spark SQL Temp Views.","user":"anonymous","dateUpdated":"2019-10-15T14:58:33+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>DF Exercises</h3>\n<h4>Spark SQL temp view</h4>\n<p>For the following DF exercises, instead of jumping right into DF solutions, you can write <code>sql</code> solutions and verify with Spark SQL Temp Views.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1570548466402_825430912","id":"20190520-123428_698724288","dateCreated":"2019-10-08T15:27:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:335","dateFinished":"2019-10-15T14:58:33+0000","dateStarted":"2019-10-15T14:58:33+0000"},{"text":"","user":"anonymous","dateUpdated":"2019-10-15T14:58:33+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|   InvoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|12/1/2010 8:26|     2.55|     17850|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|\n|   536365|   84406B|CREAM CUPID HEART...|       8|12/1/2010 8:26|     2.75|     17850|United Kingdom|\n|   536365|   84029G|KNITTED UNION FLA...|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|\n|   536365|   84029E|RED WOOLLY HOTTIE...|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|\n|   536365|    22752|SET 7 BABUSHKA NE...|       2|12/1/2010 8:26|     7.65|     17850|United Kingdom|\n|   536365|    21730|GLASS STAR FROSTE...|       6|12/1/2010 8:26|     4.25|     17850|United Kingdom|\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\n\n"}]},"apps":[],"jobName":"paragraph_1570548466403_1654884309","id":"20190520-142038_1683726413","dateCreated":"2019-10-08T15:27:46+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:336"},{"text":"%md\n#### Q1: Find the top N largest invoices by the amount (`Quantity * UnitPrice`)\n\nNote: `InvoiceNo` will appear in multiple rows. <br>(e.g. a receipt can have multiple items on it.)\n\n**Sample output**\n```bash\n+---------+------------------+\n|InvoiceNo|            Amount|\n+---------+------------------+\n|   581483|          168469.6|\n|   541431|           77183.6|\n|   574941| 52940.93999999999|\n|   576365|50653.909999999996|\n|   556444|           38970.0|\n+---------+------------------+\n```","user":"anonymous","dateUpdated":"2019-10-15T14:58:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Q1: Find the top N largest invoices by the amount (<code>Quantity * UnitPrice</code>)</h4>\n<p>Note: <code>InvoiceNo</code> will appear in multiple rows. <br>(e.g. a receipt can have multiple items on it.)</p>\n<p><strong>Sample output</strong></p>\n<pre><code class=\"bash\">+---------+------------------+\n|InvoiceNo|            Amount|\n+---------+------------------+\n|   581483|          168469.6|\n|   541431|           77183.6|\n|   574941| 52940.93999999999|\n|   576365|50653.909999999996|\n|   556444|           38970.0|\n+---------+------------------+\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1570548466403_284923334","id":"20190520-133812_405266917","dateCreated":"2019-10-08T15:27:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:337","dateFinished":"2019-10-15T14:58:34+0000","dateStarted":"2019-10-15T14:58:34+0000"},{"text":"","user":"anonymous","dateUpdated":"2019-10-15T14:58:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+------------------+\n|InvoiceNo|            Amount|\n+---------+------------------+\n|   581483|          168469.6|\n|   541431|           77183.6|\n|   574941| 52940.93999999999|\n|   576365|50653.909999999996|\n|   556444|           38970.0|\n+---------+------------------+\nonly showing top 5 rows\n\nlargestInvoicesDf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [InvoiceNo: string, Amount: double]\n"}]},"apps":[],"jobName":"paragraph_1570548466404_1505010684","id":"20190519-215312_1016690251","dateCreated":"2019-10-08T15:27:46+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:338"},{"text":"// Create Retail View\nretailCastDf.where($\"Quantity\" > 0).withColumn(\"Amount\", col(\"Quantity\")*col(\"UnitPrice\")).createOrReplaceTempView(\"retail_view\")","user":"anonymous","dateUpdated":"2019-10-15T15:17:34+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1570720266708_357910247","id":"20191010-151106_268118940","dateCreated":"2019-10-10T15:11:06+0000","dateStarted":"2019-10-15T15:17:34+0000","dateFinished":"2019-10-15T15:17:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:339"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1571152792250_1106025892","id":"20191015-151952_851565882","dateCreated":"2019-10-15T15:19:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4974","text":"// Investigate why my results defer from edwards\nspark.sql(\"SELECT * FROM retail_view WHERE InvoiceNo = 574941 ORDER BY Amount DESC\").show(5)\n\n// concl: Edward is using a different csv file","dateUpdated":"2019-10-15T15:27:37+0000","dateFinished":"2019-10-15T15:25:30+0000","dateStarted":"2019-10-15T15:25:28+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+-------+\n|InvoiceNo|StockCode|         Description|Quantity|        invoiceDate|UnitPrice|CustomerID|       Country| Amount|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+-------+\n|   574941|    22197|      POPCORN HOLDER|    1820|2011-11-07 17:42:00|     1.95|      null|United Kingdom| 3549.0|\n|   574941|    22086|PAPER CHAIN KIT 5...|     478|2011-11-07 17:42:00|     6.95|      null|United Kingdom| 3322.1|\n|   574941|    23084|  RABBIT NIGHT LIGHT|     628|2011-11-07 17:42:00|     4.95|      null|United Kingdom| 3108.6|\n|   574941|    23344|JUMBO BAG 50'S CH...|     484|2011-11-07 17:42:00|     4.95|      null|United Kingdom| 2395.8|\n|   574941|    23203|JUMBO BAG VINTAGE...|     375|2011-11-07 17:42:00|     4.95|      null|United Kingdom|1856.25|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+-------+\nonly showing top 5 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=35"],"interpreterSettingId":"spark"}}},{"text":"\nspark.sql(\"SELECT InvoiceNo, Amount \" +\n    \"FROM retail_view \" +\n    \"ORDER BY Amount DESC \" +\n    \"LIMIT 5\").\n    show()","user":"anonymous","dateUpdated":"2019-10-15T15:17:54+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+--------+\n|InvoiceNo|  Amount|\n+---------+--------+\n|   581483|168469.6|\n|   541431| 77183.6|\n|   556444| 38970.0|\n|   537632|13541.33|\n|  A563185|11062.06|\n+---------+--------+\n\n"}]},"apps":[],"jobName":"paragraph_1570548466404_-446177243","id":"20191007-145909_914572499","dateCreated":"2019-10-08T15:27:46+0000","dateStarted":"2019-10-15T15:17:55+0000","dateFinished":"2019-10-15T15:17:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:340","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=30"],"interpreterSettingId":"spark"}}},{"text":"%md\n#### Q2: Find the top N largest invoices by the amount and show receipt details\n\n```\n+---------+------------------+-------------------+----------+--------------+\n|InvoiceNo|            Amount|        InvoiceDate|CustomerID|       Country|\n+---------+------------------+-------------------+----------+--------------+\n|   581483|          168469.6|2011-12-09 09:15:00|     16446|United Kingdom|\n|   541431|           77183.6|2011-01-18 10:01:00|     12346|United Kingdom|\n|   574941| 52940.93999999999|2011-11-07 17:42:00|      null|United Kingdom|\n|   576365|50653.909999999996|2011-11-14 17:55:00|      null|United Kingdom|\n|   556444|           38970.0|2011-06-10 15:28:00|     15098|United Kingdom|\n+---------+------------------+-------------------+----------+--------------+\n```","user":"anonymous","dateUpdated":"2019-10-15T14:58:42+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Q2: Find the top N largest invoices by the amount and show receipt details</h4>\n<pre><code>+---------+------------------+-------------------+----------+--------------+\n|InvoiceNo|            Amount|        InvoiceDate|CustomerID|       Country|\n+---------+------------------+-------------------+----------+--------------+\n|   581483|          168469.6|2011-12-09 09:15:00|     16446|United Kingdom|\n|   541431|           77183.6|2011-01-18 10:01:00|     12346|United Kingdom|\n|   574941| 52940.93999999999|2011-11-07 17:42:00|      null|United Kingdom|\n|   576365|50653.909999999996|2011-11-14 17:55:00|      null|United Kingdom|\n|   556444|           38970.0|2011-06-10 15:28:00|     15098|United Kingdom|\n+---------+------------------+-------------------+----------+--------------+\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1570548466404_2056762298","id":"20190520-124355_215736883","dateCreated":"2019-10-08T15:27:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:341","dateFinished":"2019-10-15T14:58:42+0000","dateStarted":"2019-10-15T14:58:42+0000"},{"text":"\nspark.sql(\"SELECT InvoiceNo, Amount, InvoiceDate, CustomerID, Country \" +\n    \"FROM retail_view \" +\n    \"ORDER BY Amount DESC \" +\n    \"LIMIT 5\").\n    show()","user":"anonymous","dateUpdated":"2019-10-15T15:29:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+--------+-------------------+----------+--------------+\n|InvoiceNo|  Amount|        InvoiceDate|CustomerID|       Country|\n+---------+--------+-------------------+----------+--------------+\n|   581483|168469.6|2011-12-09 09:15:00|     16446|United Kingdom|\n|   541431| 77183.6|2011-01-18 10:01:00|     12346|United Kingdom|\n|   556444| 38970.0|2011-06-10 15:28:00|     15098|United Kingdom|\n|   537632|13541.33|2010-12-07 15:08:00|      null|United Kingdom|\n|  A563185|11062.06|2011-08-12 14:50:00|      null|United Kingdom|\n+---------+--------+-------------------+----------+--------------+\n\n"}]},"apps":[],"jobName":"paragraph_1570548466405_-1986934346","id":"20190520-122626_1736024345","dateCreated":"2019-10-08T15:27:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:342","dateFinished":"2019-10-15T15:29:22+0000","dateStarted":"2019-10-15T15:29:20+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=36"],"interpreterSettingId":"spark"}}},{"text":"%md\n#### Q3: For each country, find the top N largest invoices by the amount and show receipt details\n\nUse `Window functions` and `rank()` function\n\nReadings:\n- https://databricks.com/blog/2015/07/15/introducing-window-functions-in-spark-sql.html\n- https://stackoverflow.com/questions/42966590/how-do-we-rank-dataframe\n- http://blog.madhukaraphatak.com/introduction-to-spark-two-part-5/\n- `Spark The Definitive Guide - page 134 - Windows Function`\n\n```\n+---------+------------------+-------------------+----------+---------+\n|InvoiceNo|            amount|        InvoiceDate|CustomerID|  Country|\n+---------+------------------+-------------------+----------+---------+\n|   571318| 5296.960000000001|2011-10-17 10:50:00|     17404|   Sweden|\n|   546530| 4400.280000000001|2011-03-14 13:25:00|     17404|   Sweden|\n|   571751|6068.0599999999995|2011-10-19 11:18:00|     12744|Singapore|\n|   548813|4037.7700000000004|2011-04-04 13:03:00|     12744|Singapore|\n|   552978| 9341.260000000004|2011-05-12 14:46:00|     12590|  Germany|\n|   564856|4257.0599999999995|2011-08-31 09:11:00|     12477|  Germany|\n|   571035|1002.3099999999998|2011-10-13 12:50:00|     12446|      RSA|\n|   573153| 8895.760000000004|2011-10-28 07:39:00|     12678|   France|\n|   570672| 4279.710000000004|2011-10-11 14:52:00|     12536|   France|\n|   541932|           2661.24|2011-01-24 11:39:00|     14439|   Greece|\n+---------+------------------+-------------------+----------+---------+\n```\n\n<br>\n<br>\n################ spoiler alert ################\n**Hints**:\n- At high level, you need to create a new column which indicates amount rank by country\n  - Use `Windows` function which partition by (\"Country\") and order by amount\n  - User `Rank()` function create a new `rank` column for each row\n  - filter out rows where `rank > 2`","user":"anonymous","dateUpdated":"2019-10-15T14:58:43+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Q3: For each country, find the top N largest invoices by the amount and show receipt details</h4>\n<p>Use <code>Window functions</code> and <code>rank()</code> function</p>\n<p>Readings:<br/>- <a href=\"https://databricks.com/blog/2015/07/15/introducing-window-functions-in-spark-sql.html\">https://databricks.com/blog/2015/07/15/introducing-window-functions-in-spark-sql.html</a><br/>- <a href=\"https://stackoverflow.com/questions/42966590/how-do-we-rank-dataframe\">https://stackoverflow.com/questions/42966590/how-do-we-rank-dataframe</a><br/>- <a href=\"http://blog.madhukaraphatak.com/introduction-to-spark-two-part-5/\">http://blog.madhukaraphatak.com/introduction-to-spark-two-part-5/</a><br/>- <code>Spark The Definitive Guide - page 134 - Windows Function</code></p>\n<pre><code>+---------+------------------+-------------------+----------+---------+\n|InvoiceNo|            amount|        InvoiceDate|CustomerID|  Country|\n+---------+------------------+-------------------+----------+---------+\n|   571318| 5296.960000000001|2011-10-17 10:50:00|     17404|   Sweden|\n|   546530| 4400.280000000001|2011-03-14 13:25:00|     17404|   Sweden|\n|   571751|6068.0599999999995|2011-10-19 11:18:00|     12744|Singapore|\n|   548813|4037.7700000000004|2011-04-04 13:03:00|     12744|Singapore|\n|   552978| 9341.260000000004|2011-05-12 14:46:00|     12590|  Germany|\n|   564856|4257.0599999999995|2011-08-31 09:11:00|     12477|  Germany|\n|   571035|1002.3099999999998|2011-10-13 12:50:00|     12446|      RSA|\n|   573153| 8895.760000000004|2011-10-28 07:39:00|     12678|   France|\n|   570672| 4279.710000000004|2011-10-11 14:52:00|     12536|   France|\n|   541932|           2661.24|2011-01-24 11:39:00|     14439|   Greece|\n+---------+------------------+-------------------+----------+---------+\n</code></pre>\n<br>\n<br>\n<p>################ spoiler alert ################<br/><strong>Hints</strong>:<br/>- At high level, you need to create a new column which indicates amount rank by country<br/> - Use <code>Windows</code> function which partition by (&ldquo;Country&rdquo;) and order by amount<br/> - User <code>Rank()</code> function create a new <code>rank</code> column for each row<br/> - filter out rows where <code>rank &gt; 2</code></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1570548466406_-1705619841","id":"20190520-150543_915955507","dateCreated":"2019-10-08T15:27:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:343","dateFinished":"2019-10-15T14:58:43+0000","dateStarted":"2019-10-15T14:58:43+0000"},{"text":"%spark\n\nspark.sql(\"desc table retail_view\").show\nspark.sql(\"select * from retail_view order by unitprice desc\").show(10)","user":"anonymous","dateUpdated":"2019-10-15T14:58:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1571151031062_2034913363","id":"20191015-145031_289172180","dateCreated":"2019-10-15T14:50:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3366","dateFinished":"2019-10-15T14:58:58+0000","dateStarted":"2019-10-15T14:58:57+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------+---------+-------+\n|   col_name|data_type|comment|\n+-----------+---------+-------+\n|  InvoiceNo|   string|   null|\n|  StockCode|   string|   null|\n|Description|   string|   null|\n|   Quantity|      int|   null|\n|invoiceDate|timestamp|   null|\n|  UnitPrice|   double|   null|\n| CustomerID|      int|   null|\n|    Country|   string|   null|\n|     Amount|   double|   null|\n+-----------+---------+-------+\n\n+---------+---------+---------------+--------+-------------------+---------+----------+--------------+---------+\n|InvoiceNo|StockCode|    Description|Quantity|        invoiceDate|UnitPrice|CustomerID|       Country|   Amount|\n+---------+---------+---------------+--------+-------------------+---------+----------+--------------+---------+\n|  C556445|        M|         Manual|      -1|2011-06-10 15:31:00|  38970.0|     15098|United Kingdom| -38970.0|\n|  C580605|AMAZONFEE|     AMAZON FEE|      -1|2011-12-05 11:36:00| 17836.46|      null|United Kingdom|-17836.46|\n|  C540117|AMAZONFEE|     AMAZON FEE|      -1|2011-01-05 09:55:00| 16888.02|      null|United Kingdom|-16888.02|\n|  C540118|AMAZONFEE|     AMAZON FEE|      -1|2011-01-05 09:57:00| 16453.71|      null|United Kingdom|-16453.71|\n|  C537630|AMAZONFEE|     AMAZON FEE|      -1|2010-12-07 15:04:00| 13541.33|      null|United Kingdom|-13541.33|\n|   537632|AMAZONFEE|     AMAZON FEE|       1|2010-12-07 15:08:00| 13541.33|      null|United Kingdom| 13541.33|\n|  C537651|AMAZONFEE|     AMAZON FEE|      -1|2010-12-07 15:49:00| 13541.33|      null|United Kingdom|-13541.33|\n|  C537644|AMAZONFEE|     AMAZON FEE|      -1|2010-12-07 15:34:00| 13474.79|      null|United Kingdom|-13474.79|\n|  C580604|AMAZONFEE|     AMAZON FEE|      -1|2011-12-05 11:35:00|  11586.5|      null|United Kingdom| -11586.5|\n|  A563185|        B|Adjust bad debt|       1|2011-08-12 14:50:00| 11062.06|      null|United Kingdom| 11062.06|\n+---------+---------+---------------+--------+-------------------+---------+----------+--------------+---------+\nonly showing top 10 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=11"],"interpreterSettingId":"spark"}}},{"text":"import org.apache.spark.sql.expressions.Window\nimport org.apache.spark.sql.functions._\n\nspark.sql(\"SELECT InvoiceNo, Amount, InvoiceDate, CustomerID, Country, \" +\n    \"RANK() OVER (PARTITION BY Country ORDER BY Amount DESC) rank \" +\n    \"FROM retail_view \").\n    where($\"rank\" > 2).\n    show(5)\n\n/*\n// DF solution*\nval wSpec = Window.partitionBy(\"Country\").orderBy(desc(\"Amount\"))\n\nval q3df = retailCastDf.select($\"InvoiceNo\",\n    ($\"Quantity\"*$\"UnitPrice\").alias(\"Amount\"),\n    $\"InvoiceDate\",\n    $\"CustomerID\",\n    $\"Country\")\n    \nq3df.withColumn(\"rank\", rank().over(wSpec)).\n    where($\"rank\" > 2).\n    show()\n*/","user":"anonymous","dateUpdated":"2019-10-15T15:12:35+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.expressions.Window\nimport org.apache.spark.sql.functions._\n+---------+------------------+-------------------+----------+-------+----+\n|InvoiceNo|            Amount|        InvoiceDate|CustomerID|Country|rank|\n+---------+------------------+-------------------+----------+-------+----+\n|   562285|             518.4|2011-08-04 10:45:00|     17404| Sweden|   3|\n|   546530|499.20000000000005|2011-03-14 13:25:00|     17404| Sweden|   4|\n|   559145|475.20000000000005|2011-07-06 14:17:00|     17404| Sweden|   5|\n|   561902|475.20000000000005|2011-07-31 15:50:00|     17404| Sweden|   5|\n|   561902|475.20000000000005|2011-07-31 15:50:00|     17404| Sweden|   5|\n+---------+------------------+-------------------+----------+-------+----+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1570721201062_2058384578","id":"20191010-152641_364243002","dateCreated":"2019-10-10T15:26:41+0000","dateStarted":"2019-10-15T15:12:35+0000","dateFinished":"2019-10-15T15:12:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:344","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=21","http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=22","http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=23"],"interpreterSettingId":"spark"}}},{"text":"Windo","user":"anonymous","dateUpdated":"2019-10-10T15:26:30+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+------------------+-------------------+----------+---------+\n|InvoiceNo|            amount|        InvoiceDate|CustomerID|  Country|\n+---------+------------------+-------------------+----------+---------+\n|   571318| 5296.960000000001|2011-10-17 10:50:00|     17404|   Sweden|\n|   546530| 4400.280000000001|2011-03-14 13:25:00|     17404|   Sweden|\n|   571751|6068.0599999999995|2011-10-19 11:18:00|     12744|Singapore|\n|   548813|4037.7700000000004|2011-04-04 13:03:00|     12744|Singapore|\n|   552978| 9341.260000000004|2011-05-12 14:46:00|     12590|  Germany|\n|   564856|4257.0599999999995|2011-08-31 09:11:00|     12477|  Germany|\n|   571035|1002.3099999999998|2011-10-13 12:50:00|     12446|      RSA|\n|   573153| 8895.760000000004|2011-10-28 07:39:00|     12678|   France|\n|   570672| 4279.710000000004|2011-10-11 14:52:00|     12536|   France|\n|   541932|           2661.24|2011-01-24 11:39:00|     14439|   Greece|\n+---------+------------------+-------------------+----------+---------+\nonly showing top 10 rows\n\nimport org.apache.spark.sql.expressions.Window\nwindowCountryByAmt: org.apache.spark.sql.expressions.WindowSpec = org.apache.spark.sql.expressions.WindowSpec@758c9ea8\namountRank: org.apache.spark.sql.Column = RANK() OVER (PARTITION BY Country ORDER BY amount DESC NULLS LAST UnspecifiedFrame)\n"}]},"apps":[],"jobName":"paragraph_1570548466406_-1701724208","id":"20190520-125029_1350468290","dateCreated":"2019-10-08T15:27:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:345"},{"text":"%md\n\n#### Q4: Generate a daily and a weekly sales table and plot diagrams using Zeppelin built-in plot.\n\n\n```bash\ndailyDf.show(5)\n+-------------------+------------------+\n|              start|       sum(amount)|\n+-------------------+------------------+\n|2010-11-30 19:00:00|          58833.88|\n|2010-12-01 19:00:00| 45666.62999999999|\n|2010-12-02 19:00:00| 46161.11000000004|\n|2010-12-04 19:00:00|31383.949999999997|\n|2010-12-05 19:00:00| 53860.18000000004|\n+-------------------+------------------+\n```\n\n```bash\nweeklyDf.show(5)\n+-------------------+------------------+\n|              start|       sum(amount)|\n+-------------------+------------------+\n|2010-11-24 19:00:00| 58833.88000000002|\n|2010-12-01 19:00:00|         266320.76|\n|2010-12-08 19:00:00|234844.27999999997|\n|2010-12-15 19:00:00|177360.10999999993|\n|2010-12-22 19:00:00|11796.309999999992|\n+-------------------+------------------+\n```\n\nReadings\n- https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html\n- http://blog.madhukaraphatak.com/introduction-to-spark-two-part-5/","user":"anonymous","dateUpdated":"2019-10-08T15:27:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Q4: Generate a daily and a weekly sales table and plot diagrams using Zeppelin built-in plot.</h4>\n<pre><code class=\"bash\">dailyDf.show(5)\n+-------------------+------------------+\n|              start|       sum(amount)|\n+-------------------+------------------+\n|2010-11-30 19:00:00|          58833.88|\n|2010-12-01 19:00:00| 45666.62999999999|\n|2010-12-02 19:00:00| 46161.11000000004|\n|2010-12-04 19:00:00|31383.949999999997|\n|2010-12-05 19:00:00| 53860.18000000004|\n+-------------------+------------------+\n</code></pre>\n<pre><code class=\"bash\">weeklyDf.show(5)\n+-------------------+------------------+\n|              start|       sum(amount)|\n+-------------------+------------------+\n|2010-11-24 19:00:00| 58833.88000000002|\n|2010-12-01 19:00:00|         266320.76|\n|2010-12-08 19:00:00|234844.27999999997|\n|2010-12-15 19:00:00|177360.10999999993|\n|2010-12-22 19:00:00|11796.309999999992|\n+-------------------+------------------+\n</code></pre>\n<p>Readings<br/>- <a href=\"https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html\">https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html</a><br/>- <a href=\"http://blog.madhukaraphatak.com/introduction-to-spark-two-part-5/\">http://blog.madhukaraphatak.com/introduction-to-spark-two-part-5/</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1570548466407_-732817004","id":"20190520-140931_1510736707","dateCreated":"2019-10-08T15:27:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:346"},{"text":"","user":"anonymous","dateUpdated":"2019-10-08T15:27:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+------------------+\n|              start|       sum(amount)|\n+-------------------+------------------+\n|2010-11-30 19:00:00| 58833.88000000002|\n|2010-12-01 19:00:00| 45666.62999999998|\n|2010-12-02 19:00:00| 46161.11000000004|\n|2010-12-04 19:00:00|          31383.95|\n|2010-12-05 19:00:00|53860.180000000044|\n+-------------------+------------------+\nonly showing top 5 rows\n\ndailySalesDf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [start: timestamp, sum(amount): double]\n"}]},"apps":[],"jobName":"paragraph_1570548466408_1358866718","id":"20190520-181045_1661878813","dateCreated":"2019-10-08T15:27:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:347"},{"text":"%sql\nselect to_date(start), `sum(amount)` from dailySales","user":"anonymous","dateUpdated":"2019-10-15T13:56:03+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/sql","fontSize":9,"results":{"0":{"graph":{"mode":"lineChart","height":326,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"start":"string","sum(amount)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"pieChart":{}},"commonSetting":{},"keys":[{"name":"to_date(dailysales.`start`)","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"sum(amount)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"to_date(dailysales.`start`)\tsum(amount)\n2010-11-30\t58833.88000000002\n2010-12-01\t45666.62999999998\n2010-12-02\t46161.11000000004\n2010-12-04\t31383.95\n2010-12-05\t53860.180000000044\n2010-12-06\t45059.05000000006\n2010-12-07\t44189.84\n2010-12-08\t51501.75\n2010-12-09\t58435.29\n2010-12-11\t17240.919999999995\n2010-12-12\t35379.340000000004\n2010-12-13\t42843.29\n2010-12-14\t29443.690000000002\n2010-12-15\t45654.68999999997\n2010-12-16\t46213.84999999999\n2010-12-18\t7517.310000000002\n2010-12-19\t24741.749999999985\n2010-12-20\t47097.93999999999\n2010-12-21\t6134.570000000001\n2010-12-22\t11796.309999999992\n2011-01-03\t14950.479999999998\n2011-01-04\t-1221.4199999999946\n2011-01-05\t37392.73999999998\n2011-01-06\t27233.14\n2011-01-08\t15710.800000000005\n2011-01-09\t24191.63999999999\n2011-01-10\t67817.13000000003\n2011-01-11\t23958.780000000013\n2011-01-12\t20533.54\n2011-01-13\t47377.25999999999\n2011-01-15\t7116.610000000001\n2011-01-16\t29256.000000000025\n2011-01-17\t18680.800000000017\n2011-01-18\t26352.860000000004\n2011-01-19\t19290.35\n2011-01-20\t34822.5\n2011-01-22\t10441.590000000002\n2011-01-23\t25555.619999999995\n2011-01-24\t27971.52000000001\n2011-01-25\t19659.619999999984\n2011-01-26\t20910.789999999994\n2011-01-27\t18749.12\n2011-01-29\t6456.4400000000005\n2011-01-30\t22364.649999999998\n2011-01-31\t29279.909999999996\n2011-02-01\t21048.44999999999\n2011-02-02\t23040.580000000005\n2011-02-03\t27984.819999999996\n2011-02-05\t3457.1100000000006\n2011-02-06\t25525.989999999994\n2011-02-07\t20728.14\n2011-02-08\t16692.58\n2011-02-09\t13203.940000000004\n2011-02-10\t20863.17\n2011-02-12\t5535.4\n2011-02-13\t26222.030000000002\n2011-02-14\t36842.57999999997\n2011-02-15\t26180.69\n2011-02-16\t25996.239999999998\n2011-02-17\t16294.03\n2011-02-19\t9578.89\n2011-02-20\t23807.830000000013\n2011-02-21\t35629.38\n2011-02-22\t26792.76000000001\n2011-02-23\t22761.030000000002\n2011-02-24\t18029.840000000007\n2011-02-26\t9491.050000000001\n2011-02-27\t21753.680000000015\n2011-02-28\t25471.710000000003\n2011-03-01\t18577.879999999994\n2011-03-02\t35487.529999999984\n2011-03-03\t19773.86000000001\n2011-03-05\t9596.23\n2011-03-06\t35833.23\n2011-03-07\t25017.469999999998\n2011-03-08\t21907.120000000003\n2011-03-09\t25431.390000000007\n2011-03-10\t24837.91\n2011-03-12\t4137.62\n2011-03-13\t25864.589999999997\n2011-03-14\t20660.03\n2011-03-15\t21182.639999999992\n2011-03-16\t38081.76999999998\n2011-03-17\t18273.289999999994\n2011-03-19\t21980.640000000003\n2011-03-20\t16370.269999999993\n2011-03-21\t31312.35000000001\n2011-03-22\t24029.070000000003\n2011-03-23\t36897.419999999984\n2011-03-24\t30656.029999999995\n2011-03-26\t8979.980000000001\n2011-03-27\t19207.030000000002\n2011-03-28\t92159.18999999997\n2011-03-29\t31489.250000000004\n2011-03-30\t31004.07999999999\n2011-03-31\t24391.780000000002\n2011-04-02\t6878.1\n2011-04-03\t25073.02000000002\n2011-04-04\t28353.830000000013\n2011-04-05\t17279.34999999999\n2011-04-06\t18373.860000000004\n2011-04-07\t24738.619999999995\n2011-04-09\t9363.880000000001\n2011-04-10\t22110.31000000001\n2011-04-11\t25124.249999999993\n2011-04-12\t23898.2\n2011-04-13\t35295.58000000001\n2011-04-14\t28327.13100000001\n2011-04-16\t13785.77\n2011-04-17\t32185.61000000003\n2011-04-18\t24012.66000000001\n2011-04-19\t28239.389999999996\n2011-04-20\t31198.600000000002\n2011-04-25\t30585.539999999994\n2011-04-26\t25590.559999999998\n2011-04-27\t21241.900000000005\n2011-04-30\t6964.660000000001\n2011-05-02\t19617.860000000015\n2011-05-03\t27462.3\n2011-05-04\t29872.219999999998\n2011-05-05\t35692.439999999995\n2011-05-06\t22.139999999999997\n2011-05-07\t18808.919999999995\n2011-05-08\t26060.430000000008\n2011-05-09\t45564.12000000004\n2011-05-10\t33240.360000000015\n2011-05-11\t58828.48000000002\n2011-05-12\t31827.560000000016\n2011-05-14\t10369.57\n2011-05-15\t26463.989999999987\n2011-05-16\t53850.72000000001\n2011-05-17\t34337.28999999999\n2011-05-18\t34348.74999999998\n2011-05-19\t26256.519999999997\n2011-05-21\t24353.230000000007\n2011-05-22\t30739.55000000001\n2011-05-23\t37028.910000000025\n2011-05-24\t24152.28\n2011-05-25\t33208.59\n2011-05-26\t28232.19000000001\n2011-05-28\t7208.299999999999\n2011-05-30\t21967.959999999995\n2011-05-31\t20191.2\n2011-06-01\t32502.01\n2011-06-02\t16750.999999999996\n2011-06-04\t25520.35000000001\n2011-06-05\t16791.390000000003\n2011-06-06\t37644.30000000001\n2011-06-07\t42940.90999999999\n2011-06-08\t45165.78999999997\n2011-06-09\t22890.620000000017\n2011-06-11\t12483.86\n2011-06-12\t20372.929999999997\n2011-06-13\t40211.930000000015\n2011-06-14\t46139.18000000001\n2011-06-15\t34131.73000000002\n2011-06-16\t20800.72\n2011-06-18\t22360.010000000002\n2011-06-19\t33493.39999999999\n2011-06-20\t22730.00999999999\n2011-06-21\t21794.940000000002\n2011-06-22\t24273.31\n2011-06-23\t8619.879999999996\n2011-06-25\t6398.239999999998\n2011-06-26\t16823.860000000008\n2011-06-27\t34704.64\n2011-06-28\t21775.429999999997\n2011-06-29\t43630.69000000001\n2011-06-30\t13375.68\n2011-07-02\t5977.140000000001\n2011-07-03\t44154.75000000001\n2011-07-04\t40334.969999999994\n2011-07-05\t26279.58\n2011-07-06\t31104.02000000001\n2011-07-07\t27093.780000000002\n2011-07-09\t5692.070000000001\n2011-07-10\t22429.530000000002\n2011-07-11\t25892.04000000001\n2011-07-12\t11612.050000000007\n2011-07-13\t31803.53000000001\n2011-07-14\t15251.360000000006\n2011-07-16\t17174.659999999993\n2011-07-17\t28443.270000000008\n2011-07-18\t49316.78000000001\n2011-07-19\t27305.41000000001\n2011-07-20\t30957.06999999999\n2011-07-21\t20015.230000000003\n2011-07-23\t26476.2\n2011-07-24\t26687.65\n2011-07-25\t22898.781\n2011-07-26\t25568.450000000004\n2011-07-27\t55706.880000000005\n2011-07-28\t18094.21\n2011-07-30\t33486.36000000001\n2011-07-31\t21362.839999999997\n2011-08-01\t14947.27000000001\n2011-08-02\t27519.240000000013\n2011-08-03\t60778.32999999999\n2011-08-04\t21548.619999999995\n2011-08-06\t7464.120000000002\n2011-08-07\t19987.14999999999\n2011-08-08\t26623.199999999993\n2011-08-09\t27474.219999999998\n2011-08-10\t72132.79\n2011-08-11\t10049.48000000001\n2011-08-13\t5150.18\n2011-08-14\t17617.239999999998\n2011-08-15\t19103.710000000014\n2011-08-16\t36360.72000000001\n2011-08-17\t66016.51\n2011-08-18\t17489.199999999997\n2011-08-20\t14549.209999999997\n2011-08-21\t27978.41\n2011-08-22\t25756.299999999996\n2011-08-23\t37074.89999999998\n2011-08-24\t22458.879999999994\n2011-08-25\t25550.229999999985\n2011-08-27\t10784.78\n2011-08-29\t31640.90000000001\n2011-08-30\t16118.000000000007\n2011-08-31\t37296.6\n2011-09-01\t41745.06999999999\n2011-09-03\t17018.49000000001\n2011-09-04\t36844.03999999999\n2011-09-05\t28052.62\n2011-09-06\t34125.65000000001\n2011-09-07\t26708.00000000002\n2011-09-08\t29317.69000000001\n2011-09-10\t35465.47000000001\n2011-09-11\t29039.31000000001\n2011-09-12\t54828.44999999999\n2011-09-13\t23360.659999999996\n2011-09-14\t62943.81\n2011-09-15\t25858.060000000005\n2011-09-17\t19537.170000000002\n2011-09-18\t46212.21000000001\n2011-09-19\t109286.20999999999\n2011-09-20\t42944.070000000014\n2011-09-21\t57076.82999999999\n2011-09-22\t39426.479999999996\n2011-09-24\t31210.920999999995\n2011-09-25\t28642.271000000008\n2011-09-26\t35752.160000000025\n2011-09-27\t43383.03999999999\n2011-09-28\t43464.32999999999\n2011-09-29\t43992.85000000002\n2011-10-01\t11623.579999999996\n2011-10-02\t64214.78000000001\n2011-10-03\t48240.84\n2011-10-04\t75244.43000000002\n2011-10-05\t58049.620000000024\n2011-10-06\t44794.680000000015\n2011-10-08\t11922.240000000003\n2011-10-09\t44265.890000000036\n2011-10-10\t38267.75000000002\n2011-10-11\t29302.850000000013\n2011-10-12\t37067.16999999998\n2011-10-13\t35225.53999999998\n2011-10-15\t21605.44000000001\n2011-10-16\t47064.140000000036\n2011-10-17\t44637.84000000001\n2011-10-18\t36788.5\n2011-10-19\t60793.13999999999\n2011-10-20\t62961.26000000003\n2011-10-22\t12302.41\n2011-10-23\t38407.72000000002\n2011-10-24\t40807.49000000002\n2011-10-25\t37842.08000000001\n2011-10-26\t46019.69999999998\n2011-10-27\t41019.92000000003\n2011-10-29\t34545.28000000002\n2011-10-30\t48475.44999999994\n2011-10-31\t28741.54999999999\n2011-11-01\t48753.80000000003\n2011-11-02\t62816.55\n2011-11-03\t60081.76000000001\n2011-11-05\t42912.399999999994\n2011-11-06\t70001.07999999996\n2011-11-07\t56647.66\n2011-11-08\t62599.430000000015\n2011-11-09\t66605.45000000004\n2011-11-10\t57186.30000000005\n2011-11-12\t33740.00999999998\n2011-11-13\t112141.10999999997\n2011-11-14\t60594.23000000001\n2011-11-15\t64408.700000000026\n2011-11-16\t57904.93000000001\n2011-11-17\t50456.590000000004\n2011-11-19\t34902.01\n2011-11-20\t48302.50000000006\n2011-11-21\t62307.31999999999\n2011-11-22\t78480.69999999998\n2011-11-23\t47529.51\n2011-11-24\t51247.10000000001\n2011-11-26\t20571.500000000004\n2011-11-27\t55442.02000000001\n2011-11-28\t72219.20000000006\n2011-11-29\t59150.98000000004\n2011-11-30\t49852.26999999997\n2011-12-01\t58644.74000000001\n2011-12-03\t24565.779999999984\n2011-12-04\t57751.32000000003\n2011-12-05\t54228.37000000003\n2011-12-06\t75076.22\n2011-12-07\t80405.06999999999\n2011-12-08\t33144.23999999999\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1570548466408_1727838906","id":"20190520-140933_785400989","dateCreated":"2019-10-08T15:27:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:348"},{"text":"","user":"anonymous","dateUpdated":"2019-10-08T15:27:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+------------------+\n|              start|       sum(amount)|\n+-------------------+------------------+\n|2010-11-24 19:00:00| 58833.88000000002|\n|2010-12-01 19:00:00|         266320.76|\n|2010-12-08 19:00:00|234844.27999999997|\n|2010-12-15 19:00:00|177360.10999999993|\n|2010-12-22 19:00:00|11796.309999999992|\n+-------------------+------------------+\nonly showing top 5 rows\n\nweeklySalesDf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [start: timestamp, sum(amount): double]\n"}]},"apps":[],"jobName":"paragraph_1570548466409_115703556","id":"20190520-140933_428817963","dateCreated":"2019-10-08T15:27:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:349"},{"text":"%sql\n","user":"anonymous","dateUpdated":"2019-10-15T13:56:04+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/sql","fontSize":9,"results":{"0":{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"to_date(weeklysales.`start`)":"string","sum(amount)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"to_date(weeklysales.`start`)","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"sum(amount)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"to_date(weeklysales.`start`)\tsum(amount)\n2010-11-24\t58833.88000000002\n2010-12-01\t266320.76\n2010-12-08\t234844.27999999997\n2010-12-15\t177360.10999999993\n2010-12-22\t11796.309999999992\n2010-12-29\t13729.059999999998\n2011-01-05\t196304.22999999995\n2011-01-12\t149317.07000000027\n2011-01-19\t137741.20000000004\n2011-01-26\t118809.36000000002\n2011-02-02\t117429.22000000006\n2011-02-09\t128847.81000000004\n2011-02-16\t138099.13000000003\n2011-02-23\t116085.18999999996\n2011-03-02\t147615.44000000015\n2011-03-09\t122114.17999999996\n2011-03-16\t150047.39000000004\n2011-03-23\t219388.9\n2011-03-30\t132980.16000000003\n2011-04-06\t123609.12000000005\n2011-04-13\t161846.1409999998\n2011-04-20\t87374.70000000004\n2011-04-27\t75286.71999999997\n2011-05-04\t189260.63000000006\n2011-05-11\t215677.61000000013\n2011-05-18\t176879.23999999993\n2011-05-25\t110808.24000000008\n2011-06-01\t172149.95999999996\n2011-06-08\t187264.3100000001\n2011-06-15\t155310.8099999999\n2011-06-22\t112595.35999999997\n2011-06-29\t173752.81\n2011-07-06\t123823.4900000001\n2011-07-13\t169295.00999999995\n2011-07-20\t152603.38100000005\n2011-07-27\t171116.80000000002\n2011-08-03\t163875.63999999987\n2011-08-10\t160414.12000000002\n2011-08-17\t188864.5300000001\n2011-08-24\t106552.79000000001\n2011-08-31\t195082.47000000012\n2011-09-07\t198719.58\n2011-09-14\t306781.53000000014\n2011-09-21\t235491.70199999987\n2011-09-28\t286780.8100000002\n2011-10-05\t226603.03000000014\n2011-10-12\t222388.63000000003\n2011-10-19\t253114.09999999998\n2011-10-26\t247555.6999999997\n2011-11-02\t355058.8800000002\n2011-11-09\t394675.79999999993\n2011-11-16\t332354.05000000016\n2011-11-23\t306160.31\n2011-11-30\t320118.69999999984\n2011-12-07\t113549.30999999985\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1570548466410_-547936755","id":"20190520-212256_1274740776","dateCreated":"2019-10-08T15:27:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:350"}],"name":"Jarvis/2-DataFrame_milad","id":"2ESP6R6J2","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}