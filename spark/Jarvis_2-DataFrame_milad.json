{"paragraphs":[{"text":"%md\n## Learning Dataset/DataFrame\nReadings: \n\n- `Spark - The Definitive Guide` chapter 3 - 10\n- The official document https://spark.apache.org/docs/2.3.3/sql-programming-guide.html","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Learning Dataset/DataFrame</h2>\n<p>Readings: </p>\n<ul>\n  <li><code>Spark - The Definitive Guide</code> chapter 3 - 10</li>\n  <li>The official document <a href=\"https://spark.apache.org/docs/2.3.3/sql-programming-guide.html\">https://spark.apache.org/docs/2.3.3/sql-programming-guide.html</a></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1571331466222_-1949701301","id":"20191007-143023_835288946","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:172"},{"text":"%md\n### Creating Dataframes\n#### Creating Dataframes from Scala `Seq`\n\nWe can convert a Sequence of Tuples to a Spark DF.\ne.g. Seq[(String, Double, String, String)] \n\nA tuple corresponds to a DF row.\nA element in a tuple corresponds to a column to a particular row.","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Creating Dataframes</h3>\n<h4>Creating Dataframes from Scala <code>Seq</code></h4>\n<p>We can convert a Sequence of Tuples to a Spark DF.<br/>e.g. Seq[(String, Double, String, String)] </p>\n<p>A tuple corresponds to a DF row.<br/>A element in a tuple corresponds to a column to a particular row.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1571331466225_-1325964395","id":"20190519-201210_1157722001","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:173"},{"text":"%md\n#### Scala Implicit Conversions\n\nIn short, you have to `import spark.implicits._` to convert/cast a `Seq[(String, Double, String, String)]` to a Spark `DataFrame`. (e.g. `lineTupleSeq.toDF`)\n\n#####  (Advanced)\nThis is called implicit conversions in Scala. In this case, `spark.implicits.localSeqToDatasetHolder` creates a Dataset from a local Seq.\n\nSpark Scala Docs:\n- <a href=\"https://spark.apache.org/docs/2.3.0/api/scala/index.html#org.apache.spark.sql.SparkSession$implicits$@localSeqToDatasetHolder[T](s:Seq[T])(implicitevidence$7:org.apache.spark.sql.Encoder[T]):org.apache.spark.sql.DatasetHolder[T]\" target=\"_blank\">implicits.localSeqToDatasetHolder</a>\n- <a href=\"http://spark.apache.org/docs/2.3.0/api/scala/index.html#org.apache.spark.sql.DatasetHolder@toDF(colNames:String*):org.apache.spark.sql.DataFrame\" target=\"_blank\">DatasetHolder</a>","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Scala Implicit Conversions</h4>\n<p>In short, you have to <code>import spark.implicits._</code> to convert/cast a <code>Seq[(String, Double, String, String)]</code> to a Spark <code>DataFrame</code>. (e.g. <code>lineTupleSeq.toDF</code>)</p>\n<h5>(Advanced)</h5>\n<p>This is called implicit conversions in Scala. In this case, <code>spark.implicits.localSeqToDatasetHolder</code> creates a Dataset from a local Seq.</p>\n<p>Spark Scala Docs:<br/>- <a href=\"https://spark.apache.org/docs/2.3.0/api/scala/index.html#org.apache.spark.sql.SparkSession$implicits$@localSeqToDatasetHolder[T](s:Seq[T])(implicitevidence$7:org.apache.spark.sql.Encoder[T]):org.apache.spark.sql.DatasetHolder[T]\" target=\"_blank\">implicits.localSeqToDatasetHolder</a><br/>- <a href=\"http://spark.apache.org/docs/2.3.0/api/scala/index.html#org.apache.spark.sql.DatasetHolder@toDF(colNames:String*):org.apache.spark.sql.DataFrame\" target=\"_blank\">DatasetHolder</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1571331466225_-922084118","id":"20190520-102917_1809142825","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:174"},{"text":"/**\n * Each line/record/row must be a Tuple\n * e.g.  Tuple(AAPL,110.5,2018-02-01,Apple)\n * \n * Lines are grouped into a Seq\n * List(\n *   (AAPL,110.5,2018-02-01,Apple),\n *   (AMZN,1500.52,2018-02-01,Ammazon.com),\n *   (FB,170.01,2018-02-01,Facebook)\n * )\n */\nval lineTuple1 = (\"AAPL\",110.5,\"2018-02-01\",\"Apple\")\nval lineTuple2 = (\"AMZN\",1500.52,\"2018-02-01\",\"Ammazon.com\")\nval lineTuple3 = (\"FB\",170.01,\"2018-02-01\",\"Facebook\")\nval lineTupleSeq = Seq(lineTuple1,lineTuple2,lineTuple3)\n\n//To use toDF, you must import this (see next section for details)\n//In fact Zeppellin interpreter already imported this for you\nimport spark.implicits._\nval stockDf = lineTupleSeq.toDF(\"ticker\",\"price\", \"date\", \"companyName\")\nstockDf.printSchema\n\n//SELECT * FROM stock LIMIT 3\nstockDf.show(3)\n\n//SELECT companyName AS company_name, price FROM stock\nstockDf.select(col(\"companyName\").as(\"company_name\"), col(\"price\")).show()\n\n","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"lineTuple1: (String, Double, String, String) = (AAPL,110.5,2018-02-01,Apple)\nlineTuple2: (String, Double, String, String) = (AMZN,1500.52,2018-02-01,Ammazon.com)\nlineTuple3: (String, Double, String, String) = (FB,170.01,2018-02-01,Facebook)\nlineTupleSeq: Seq[(String, Double, String, String)] = List((AAPL,110.5,2018-02-01,Apple), (AMZN,1500.52,2018-02-01,Ammazon.com), (FB,170.01,2018-02-01,Facebook))\nimport spark.implicits._\nstockDf: org.apache.spark.sql.DataFrame = [ticker: string, price: double ... 2 more fields]\nroot\n |-- ticker: string (nullable = true)\n |-- price: double (nullable = false)\n |-- date: string (nullable = true)\n |-- companyName: string (nullable = true)\n\n+------+-------+----------+-----------+\n|ticker|  price|      date|companyName|\n+------+-------+----------+-----------+\n|  AAPL|  110.5|2018-02-01|      Apple|\n|  AMZN|1500.52|2018-02-01|Ammazon.com|\n|    FB| 170.01|2018-02-01|   Facebook|\n+------+-------+----------+-----------+\n\n+------------+-------+\n|company_name|  price|\n+------------+-------+\n|       Apple|  110.5|\n| Ammazon.com|1500.52|\n|    Facebook| 170.01|\n+------------+-------+\n\n"}]},"apps":[],"jobName":"paragraph_1571331466226_-1867060835","id":"20190519-201416_412351679","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:175"},{"text":"%md\n### Creating DF from CSV Files","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Creating DF from CSV Files</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1571331466226_-1086127534","id":"20190520-104920_1833330750","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:176"},{"text":"//Read CSV file to df\n//local or hdfs path\n//val path = \"/user/milad/datasets/online_retail/online-retail-dataset_clean.txt\"\nval path = \"/user/milad/datasets/online_retail/online-retail-dataset.csv\"\n\n//spark.read is able to handle csv formats\nval retailDf = spark.read.format(\"csv\").\n    option(\"header\", \"true\").\n    option(\"inferSchema\", \"true\").\n    load(path)\n\n\nretailDf.printSchema\nretailDf.show(3)\nretailDf.show(3,false)","user":"anonymous","dateUpdated":"2019-10-22T15:03:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"path: String = /user/milad/datasets/online_retail/online-retail-dataset.csv\nretailDf: org.apache.spark.sql.DataFrame = [InvoiceNo: string, StockCode: string ... 6 more fields]\nroot\n |-- InvoiceNo: string (nullable = true)\n |-- StockCode: string (nullable = true)\n |-- Description: string (nullable = true)\n |-- Quantity: integer (nullable = true)\n |-- InvoiceDate: string (nullable = true)\n |-- UnitPrice: double (nullable = true)\n |-- CustomerID: integer (nullable = true)\n |-- Country: string (nullable = true)\n\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|   InvoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|12/1/2010 8:26|     2.55|     17850|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|\n|   536365|   84406B|CREAM CUPID HEART...|       8|12/1/2010 8:26|     2.75|     17850|United Kingdom|\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\nonly showing top 3 rows\n\n+---------+---------+----------------------------------+--------+--------------+---------+----------+--------------+\n|InvoiceNo|StockCode|Description                       |Quantity|InvoiceDate   |UnitPrice|CustomerID|Country       |\n+---------+---------+----------------------------------+--------+--------------+---------+----------+--------------+\n|536365   |85123A   |WHITE HANGING HEART T-LIGHT HOLDER|6       |12/1/2010 8:26|2.55     |17850     |United Kingdom|\n|536365   |71053    |WHITE METAL LANTERN               |6       |12/1/2010 8:26|3.39     |17850     |United Kingdom|\n|536365   |84406B   |CREAM CUPID HEARTS COAT HANGER    |8       |12/1/2010 8:26|2.75     |17850     |United Kingdom|\n+---------+---------+----------------------------------+--------+--------------+---------+----------+--------------+\nonly showing top 3 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=0","http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=1","http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=2","http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=3"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1571331466227_578161668","id":"20190520-095229_630927102","dateCreated":"2019-10-17T16:57:46+0000","dateStarted":"2019-10-22T15:03:45+0000","dateFinished":"2019-10-22T15:04:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:177"},{"text":"%md\n#### Column Type Cast\nIn `retailDf` schema, `InvoiceDate` column data type is string. \n\nIn this practice, you need to cast `InvoiceDate` column to a Spark `timestamp` data type\n\n```bash\nresultDf.printSchema\nroot\n |-- InvoiceNo: string (nullable = true)\n |-- StockCode: string (nullable = true)\n |-- Description: string (nullable = true)\n |-- Quantity: integer (nullable = true)\n |-- InvoiceDate: timestamp (nullable = true) #cast string to timestamp\n |-- UnitPrice: double (nullable = true)\n |-- CustomerID: integer (nullable = true)\n |-- Country: string (nullable = true)\n```\n","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Column Type Cast</h4>\n<p>In <code>retailDf</code> schema, <code>InvoiceDate</code> column data type is string. </p>\n<p>In this practice, you need to cast <code>InvoiceDate</code> column to a Spark <code>timestamp</code> data type</p>\n<pre><code class=\"bash\">resultDf.printSchema\nroot\n |-- InvoiceNo: string (nullable = true)\n |-- StockCode: string (nullable = true)\n |-- Description: string (nullable = true)\n |-- Quantity: integer (nullable = true)\n |-- InvoiceDate: timestamp (nullable = true) #cast string to timestamp\n |-- UnitPrice: double (nullable = true)\n |-- CustomerID: integer (nullable = true)\n |-- Country: string (nullable = true)\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1571331466227_1183542025","id":"20190520-085947_2007764287","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:178"},{"text":"import org.apache.spark.sql.functions.to_timestamp\n//import org.apache.spark.sql.types\n//import org.apache.spark.sql.functions.{to_timestamp}\nval FMT = \"MM/dd/yyyy HH:mm\"\nval retailCastDf = retailDf.withColumn(\"invoiceDate\", to_timestamp(retailDf(\"InvoiceDate\"), FMT))\n//retailCastDf.printSchema\n\nretailDf(\"InvoiceDate\")\n\nretailCastDf.show(3)\n//retailCastDf.selectExpr(\"min(InvoiceDate)\").show\n","user":"anonymous","dateUpdated":"2019-10-22T16:04:02+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions.to_timestamp\nFMT: String = MM/dd/yyyy HH:mm\nretailCastDf: org.apache.spark.sql.DataFrame = [InvoiceNo: string, StockCode: string ... 6 more fields]\nres74: org.apache.spark.sql.Column = InvoiceDate\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|        invoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|2010-12-01 08:26:00|     2.55|     17850|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|2010-12-01 08:26:00|     3.39|     17850|United Kingdom|\n|   536365|   84406B|CREAM CUPID HEART...|       8|2010-12-01 08:26:00|     2.75|     17850|United Kingdom|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\nonly showing top 3 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=9"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1571331466228_1085067980","id":"20191009-233523_1741676923","dateCreated":"2019-10-17T16:57:46+0000","dateStarted":"2019-10-22T16:04:02+0000","dateFinished":"2019-10-22T16:04:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:179"},{"text":"//Cache DF in memory since it will be accessed frequently\nretailCastDf.cache\n","user":"anonymous","dateUpdated":"2019-10-22T16:04:16+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res79: retailCastDf.type = [InvoiceNo: string, StockCode: string ... 6 more fields]\n"}]},"apps":[],"jobName":"paragraph_1571331466228_-30815314","id":"20190519-215300_721200493","dateCreated":"2019-10-17T16:57:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:180","dateFinished":"2019-10-22T16:04:16+0000","dateStarted":"2019-10-22T16:04:16+0000"},{"text":"%md\n### DataFrame SELECT\nImplement the following SQL queries using dataframe. Compare different select syntax.\n\n```sql\nSELECT *\nFROM retail\nLIMIT 3\n\nSELECT InvoiceNo\nFROM retail\n\nSELECT InvoiceNo as invoiceNo\nFROM retail\n\nSELECT max(UnitPrice) as max_unit_price\nFROM retail\n```","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>DataFrame SELECT</h3>\n<p>Implement the following SQL queries using dataframe. Compare different select syntax.</p>\n<pre><code class=\"sql\">SELECT *\nFROM retail\nLIMIT 3\n\nSELECT InvoiceNo\nFROM retail\n\nSELECT InvoiceNo as invoiceNo\nFROM retail\n\nSELECT max(UnitPrice) as max_unit_price\nFROM retail\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1571331466228_-2088314352","id":"20190519-221054_1925024171","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:181"},{"text":"/*\n//SELECT * from retail limit 1;\nretailCastDf.show(1)\nimport org.apache.spark.sql.functions._\n//select InvoiceNo,CustomerID,Country from retail limit 1;\nretailCastDf.select(\"InvoiceNo\").show(1)\n\n//Different ways of select \nretailCastDf.select($\"InvoiceNo\").show(1)\nretailCastDf.select('InvoiceNo).show(1)\nretailCastDf.select(col(\"InvoiceNo\")).show(1)\nretailCastDf.select(retailCastDf.col(\"InvoiceNo\")).show(1)\nretailCastDf.select(expr(\"InvoiceNo\")).show(1)\n\n//ERROR: cannot mix \n//retailCastDf.select($\"InvoiceNo\", \"StockCode\").show(1)\n\n//expr or selectExpr is most powerful and close to SQL syntax\n//SELECT InvoiceNo as invoiceId from retail limit 1;\nretailCastDf.select(expr(\"InvoiceNo as invoiceId\")).show(1)\nretailCastDf.selectExpr(\"InvoiceNo as invoiceId\").show(1)\n\n//SELECT * from retail limit 1;\nretailCastDf.selectExpr(\"*\").show(1)\n\n//select max(UnitPrice) as maxUnitPrice from retail\nretailCastDf.selectExpr(\"max(UnitPrice) as maxUnitPrice\").show \n\n*/","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":11,"editorMode":"ace/mode/scala","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":98.011,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1571331466229_1353716612","id":"20190519-211701_1956303781","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:182"},{"text":"%md\n### DataFrame filtering (WHERE)\n\nImplement the following SQL quries\n\n```sql\nSELECT *\nFROM retail\nWHERE InvoiceNo = 536365\nLIMIT 2\n```\n\nSample results\n```\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|        InvoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|2010-12-01 08:26:00|     2.55|     17850|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|2010-12-01 08:26:00|     3.39|     17850|United Kingdom|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\nonly showing top 2 rows\n```","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>DataFrame filtering (WHERE)</h3>\n<p>Implement the following SQL quries</p>\n<pre><code class=\"sql\">SELECT *\nFROM retail\nWHERE InvoiceNo = 536365\nLIMIT 2\n</code></pre>\n<p>Sample results</p>\n<pre><code>+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|        InvoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|2010-12-01 08:26:00|     2.55|     17850|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|2010-12-01 08:26:00|     3.39|     17850|United Kingdom|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\nonly showing top 2 rows\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1571331466229_-1976210451","id":"20190519-221114_648626738","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:183"},{"text":"retailCastDf.where($\"InvoiceNo\" === 536365).show(2)","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|        invoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|2010-12-01 08:26:00|     2.55|     17850|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|2010-12-01 08:26:00|     3.39|     17850|United Kingdom|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+\nonly showing top 2 rows\n\n"}]},"apps":[],"jobName":"paragraph_1571331466229_1712334030","id":"20190519-201625_2028882244","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:184"},{"user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1571331466229_1128217649","id":"20191007-145852_244125478","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:185"},{"text":"%md\n\n### DF Exercises\n#### Spark SQL temp view\nFor the following DF exercises, instead of jumping right into DF solutions, you can write `sql` solutions and verify with Spark SQL Temp Views.","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>DF Exercises</h3>\n<h4>Spark SQL temp view</h4>\n<p>For the following DF exercises, instead of jumping right into DF solutions, you can write <code>sql</code> solutions and verify with Spark SQL Temp Views.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1571331466230_1504713447","id":"20190520-123428_698724288","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:186"},{"text":"","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\n|InvoiceNo|StockCode|         Description|Quantity|   InvoiceDate|UnitPrice|CustomerID|       Country|\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\n|   536365|   85123A|WHITE HANGING HEA...|       6|12/1/2010 8:26|     2.55|     17850|United Kingdom|\n|   536365|    71053| WHITE METAL LANTERN|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|\n|   536365|   84406B|CREAM CUPID HEART...|       8|12/1/2010 8:26|     2.75|     17850|United Kingdom|\n|   536365|   84029G|KNITTED UNION FLA...|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|\n|   536365|   84029E|RED WOOLLY HOTTIE...|       6|12/1/2010 8:26|     3.39|     17850|United Kingdom|\n|   536365|    22752|SET 7 BABUSHKA NE...|       2|12/1/2010 8:26|     7.65|     17850|United Kingdom|\n|   536365|    21730|GLASS STAR FROSTE...|       6|12/1/2010 8:26|     4.25|     17850|United Kingdom|\n+---------+---------+--------------------+--------+--------------+---------+----------+--------------+\n\n"}]},"apps":[],"jobName":"paragraph_1571331466231_1714108428","id":"20190520-142038_1683726413","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:187"},{"text":"%md\n#### Q1: Find the top N largest invoices by the amount (`Quantity * UnitPrice`)\n\nNote: `InvoiceNo` will appear in multiple rows. <br>(e.g. a receipt can have multiple items on it.)\n\n**Sample output**\n```bash\n+---------+------------------+\n|InvoiceNo|            Amount|\n+---------+------------------+\n|   581483|          168469.6|\n|   541431|           77183.6|\n|   574941| 52940.93999999999|\n|   576365|50653.909999999996|\n|   556444|           38970.0|\n+---------+------------------+\n```","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Q1: Find the top N largest invoices by the amount (<code>Quantity * UnitPrice</code>)</h4>\n<p>Note: <code>InvoiceNo</code> will appear in multiple rows. <br>(e.g. a receipt can have multiple items on it.)</p>\n<p><strong>Sample output</strong></p>\n<pre><code class=\"bash\">+---------+------------------+\n|InvoiceNo|            Amount|\n+---------+------------------+\n|   581483|          168469.6|\n|   541431|           77183.6|\n|   574941| 52940.93999999999|\n|   576365|50653.909999999996|\n|   556444|           38970.0|\n+---------+------------------+\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1571331466231_1868205323","id":"20190520-133812_405266917","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:188"},{"text":"","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+------------------+\n|InvoiceNo|            Amount|\n+---------+------------------+\n|   581483|          168469.6|\n|   541431|           77183.6|\n|   574941| 52940.93999999999|\n|   576365|50653.909999999996|\n|   556444|           38970.0|\n+---------+------------------+\nonly showing top 5 rows\n\nlargestInvoicesDf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [InvoiceNo: string, Amount: double]\n"}]},"apps":[],"jobName":"paragraph_1571331466232_-1252104672","id":"20190519-215312_1016690251","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:189"},{"text":"// Create Retail View from refined dataframe\nval retailDf_R = retailCastDf.where($\"Quantity\" > 0).withColumn(\"Amount\", col(\"Quantity\")*col(\"UnitPrice\"))\n\nretailDf_R.createOrReplaceTempView(\"retail_view\")","user":"anonymous","dateUpdated":"2019-10-22T15:49:09+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"retailDf_R: org.apache.spark.sql.DataFrame = [InvoiceNo: string, StockCode: string ... 7 more fields]\n"}]},"apps":[],"jobName":"paragraph_1571331466232_764338125","id":"20191010-151106_268118940","dateCreated":"2019-10-17T16:57:46+0000","dateStarted":"2019-10-22T15:49:09+0000","dateFinished":"2019-10-22T15:49:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:190"},{"text":"// Investigate why my results defer from edwards\nspark.sql(\"SELECT * FROM retail_view WHERE InvoiceNo = 574941 ORDER BY Amount DESC\").show(5)\n\n// concl: Edward is using a different csv file","user":"anonymous","dateUpdated":"2019-10-22T15:49:25+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+-------+\n|InvoiceNo|StockCode|         Description|Quantity|        invoiceDate|UnitPrice|CustomerID|       Country| Amount|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+-------+\n|   574941|    22197|      POPCORN HOLDER|    1820|2011-11-07 17:42:00|     1.95|      null|United Kingdom| 3549.0|\n|   574941|    22086|PAPER CHAIN KIT 5...|     478|2011-11-07 17:42:00|     6.95|      null|United Kingdom| 3322.1|\n|   574941|    23084|  RABBIT NIGHT LIGHT|     628|2011-11-07 17:42:00|     4.95|      null|United Kingdom| 3108.6|\n|   574941|    23344|JUMBO BAG 50'S CH...|     484|2011-11-07 17:42:00|     4.95|      null|United Kingdom| 2395.8|\n|   574941|    23203|JUMBO BAG VINTAGE...|     375|2011-11-07 17:42:00|     4.95|      null|United Kingdom|1856.25|\n+---------+---------+--------------------+--------+-------------------+---------+----------+--------------+-------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1571331466233_-1268015127","id":"20191015-151952_851565882","dateCreated":"2019-10-17T16:57:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:191","dateFinished":"2019-10-22T15:49:42+0000","dateStarted":"2019-10-22T15:49:25+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=8"],"interpreterSettingId":"spark"}}},{"text":"\nspark.sql(\"SELECT InvoiceNo, Amount \" +\n    \"FROM retail_view \" +\n    \"ORDER BY Amount DESC \" +\n    \"LIMIT 5\").\n    show()","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+--------+\n|InvoiceNo|  Amount|\n+---------+--------+\n|   581483|168469.6|\n|   541431| 77183.6|\n|   556444| 38970.0|\n|   537632|13541.33|\n|  A563185|11062.06|\n+---------+--------+\n\n"}]},"apps":[],"jobName":"paragraph_1571331466233_1160117575","id":"20191007-145909_914572499","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:192"},{"text":"%md\n#### Q2: Find the top N largest invoices by the amount and show receipt details\n\n```\n+---------+------------------+-------------------+----------+--------------+\n|InvoiceNo|            Amount|        InvoiceDate|CustomerID|       Country|\n+---------+------------------+-------------------+----------+--------------+\n|   581483|          168469.6|2011-12-09 09:15:00|     16446|United Kingdom|\n|   541431|           77183.6|2011-01-18 10:01:00|     12346|United Kingdom|\n|   574941| 52940.93999999999|2011-11-07 17:42:00|      null|United Kingdom|\n|   576365|50653.909999999996|2011-11-14 17:55:00|      null|United Kingdom|\n|   556444|           38970.0|2011-06-10 15:28:00|     15098|United Kingdom|\n+---------+------------------+-------------------+----------+--------------+\n```","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Q2: Find the top N largest invoices by the amount and show receipt details</h4>\n<pre><code>+---------+------------------+-------------------+----------+--------------+\n|InvoiceNo|            Amount|        InvoiceDate|CustomerID|       Country|\n+---------+------------------+-------------------+----------+--------------+\n|   581483|          168469.6|2011-12-09 09:15:00|     16446|United Kingdom|\n|   541431|           77183.6|2011-01-18 10:01:00|     12346|United Kingdom|\n|   574941| 52940.93999999999|2011-11-07 17:42:00|      null|United Kingdom|\n|   576365|50653.909999999996|2011-11-14 17:55:00|      null|United Kingdom|\n|   556444|           38970.0|2011-06-10 15:28:00|     15098|United Kingdom|\n+---------+------------------+-------------------+----------+--------------+\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1571331466234_-1764370348","id":"20190520-124355_215736883","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:193"},{"text":"\nspark.sql(\"SELECT InvoiceNo, Amount, InvoiceDate, CustomerID, Country \" +\n    \"FROM retail_view \" +\n    \"ORDER BY Amount DESC \" +\n    \"LIMIT 5\").\n    show()","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+--------+-------------------+----------+--------------+\n|InvoiceNo|  Amount|        InvoiceDate|CustomerID|       Country|\n+---------+--------+-------------------+----------+--------------+\n|   581483|168469.6|2011-12-09 09:15:00|     16446|United Kingdom|\n|   541431| 77183.6|2011-01-18 10:01:00|     12346|United Kingdom|\n|   556444| 38970.0|2011-06-10 15:28:00|     15098|United Kingdom|\n|   537632|13541.33|2010-12-07 15:08:00|      null|United Kingdom|\n|  A563185|11062.06|2011-08-12 14:50:00|      null|United Kingdom|\n+---------+--------+-------------------+----------+--------------+\n\n"}]},"apps":[],"jobName":"paragraph_1571331466234_-1503373809","id":"20190520-122626_1736024345","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:194"},{"text":"%md\n#### Q3: For each country, find the top N largest invoices by the amount and show receipt details\n\nUse `Window functions` and `rank()` function\n\nReadings:\n- https://databricks.com/blog/2015/07/15/introducing-window-functions-in-spark-sql.html\n- https://stackoverflow.com/questions/42966590/how-do-we-rank-dataframe\n- http://blog.madhukaraphatak.com/introduction-to-spark-two-part-5/\n- `Spark The Definitive Guide - page 134 - Windows Function`\n\n```\n+---------+------------------+-------------------+----------+---------+\n|InvoiceNo|            amount|        InvoiceDate|CustomerID|  Country|\n+---------+------------------+-------------------+----------+---------+\n|   571318| 5296.960000000001|2011-10-17 10:50:00|     17404|   Sweden|\n|   546530| 4400.280000000001|2011-03-14 13:25:00|     17404|   Sweden|\n|   571751|6068.0599999999995|2011-10-19 11:18:00|     12744|Singapore|\n|   548813|4037.7700000000004|2011-04-04 13:03:00|     12744|Singapore|\n|   552978| 9341.260000000004|2011-05-12 14:46:00|     12590|  Germany|\n|   564856|4257.0599999999995|2011-08-31 09:11:00|     12477|  Germany|\n|   571035|1002.3099999999998|2011-10-13 12:50:00|     12446|      RSA|\n|   573153| 8895.760000000004|2011-10-28 07:39:00|     12678|   France|\n|   570672| 4279.710000000004|2011-10-11 14:52:00|     12536|   France|\n|   541932|           2661.24|2011-01-24 11:39:00|     14439|   Greece|\n+---------+------------------+-------------------+----------+---------+\n```\n\n<br>\n<br>\n################ spoiler alert ################\n**Hints**:\n- At high level, you need to create a new column which indicates amount rank by country\n  - Use `Windows` function which partition by (\"Country\") and order by amount\n  - User `Rank()` function create a new `rank` column for each row\n  - filter out rows where `rank > 2`","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Q3: For each country, find the top N largest invoices by the amount and show receipt details</h4>\n<p>Use <code>Window functions</code> and <code>rank()</code> function</p>\n<p>Readings:<br/>- <a href=\"https://databricks.com/blog/2015/07/15/introducing-window-functions-in-spark-sql.html\">https://databricks.com/blog/2015/07/15/introducing-window-functions-in-spark-sql.html</a><br/>- <a href=\"https://stackoverflow.com/questions/42966590/how-do-we-rank-dataframe\">https://stackoverflow.com/questions/42966590/how-do-we-rank-dataframe</a><br/>- <a href=\"http://blog.madhukaraphatak.com/introduction-to-spark-two-part-5/\">http://blog.madhukaraphatak.com/introduction-to-spark-two-part-5/</a><br/>- <code>Spark The Definitive Guide - page 134 - Windows Function</code></p>\n<pre><code>+---------+------------------+-------------------+----------+---------+\n|InvoiceNo|            amount|        InvoiceDate|CustomerID|  Country|\n+---------+------------------+-------------------+----------+---------+\n|   571318| 5296.960000000001|2011-10-17 10:50:00|     17404|   Sweden|\n|   546530| 4400.280000000001|2011-03-14 13:25:00|     17404|   Sweden|\n|   571751|6068.0599999999995|2011-10-19 11:18:00|     12744|Singapore|\n|   548813|4037.7700000000004|2011-04-04 13:03:00|     12744|Singapore|\n|   552978| 9341.260000000004|2011-05-12 14:46:00|     12590|  Germany|\n|   564856|4257.0599999999995|2011-08-31 09:11:00|     12477|  Germany|\n|   571035|1002.3099999999998|2011-10-13 12:50:00|     12446|      RSA|\n|   573153| 8895.760000000004|2011-10-28 07:39:00|     12678|   France|\n|   570672| 4279.710000000004|2011-10-11 14:52:00|     12536|   France|\n|   541932|           2661.24|2011-01-24 11:39:00|     14439|   Greece|\n+---------+------------------+-------------------+----------+---------+\n</code></pre>\n<br>\n<br>\n<p>################ spoiler alert ################<br/><strong>Hints</strong>:<br/>- At high level, you need to create a new column which indicates amount rank by country<br/> - Use <code>Windows</code> function which partition by (&ldquo;Country&rdquo;) and order by amount<br/> - User <code>Rank()</code> function create a new <code>rank</code> column for each row<br/> - filter out rows where <code>rank &gt; 2</code></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1571331466235_-1283889937","id":"20190520-150543_915955507","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:195"},{"text":"%spark\n\n/*spark.sql(\"desc table retail_view\").show\nspark.sql(\"select * from retail_view order by unitprice desc\").show(10)*/","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------+---------+-------+\n|   col_name|data_type|comment|\n+-----------+---------+-------+\n|  InvoiceNo|   string|   null|\n|  StockCode|   string|   null|\n|Description|   string|   null|\n|   Quantity|      int|   null|\n|invoiceDate|timestamp|   null|\n|  UnitPrice|   double|   null|\n| CustomerID|      int|   null|\n|    Country|   string|   null|\n|     Amount|   double|   null|\n+-----------+---------+-------+\n\n+---------+---------+---------------+--------+-------------------+---------+----------+--------------+---------+\n|InvoiceNo|StockCode|    Description|Quantity|        invoiceDate|UnitPrice|CustomerID|       Country|   Amount|\n+---------+---------+---------------+--------+-------------------+---------+----------+--------------+---------+\n|  C556445|        M|         Manual|      -1|2011-06-10 15:31:00|  38970.0|     15098|United Kingdom| -38970.0|\n|  C580605|AMAZONFEE|     AMAZON FEE|      -1|2011-12-05 11:36:00| 17836.46|      null|United Kingdom|-17836.46|\n|  C540117|AMAZONFEE|     AMAZON FEE|      -1|2011-01-05 09:55:00| 16888.02|      null|United Kingdom|-16888.02|\n|  C540118|AMAZONFEE|     AMAZON FEE|      -1|2011-01-05 09:57:00| 16453.71|      null|United Kingdom|-16453.71|\n|  C537630|AMAZONFEE|     AMAZON FEE|      -1|2010-12-07 15:04:00| 13541.33|      null|United Kingdom|-13541.33|\n|   537632|AMAZONFEE|     AMAZON FEE|       1|2010-12-07 15:08:00| 13541.33|      null|United Kingdom| 13541.33|\n|  C537651|AMAZONFEE|     AMAZON FEE|      -1|2010-12-07 15:49:00| 13541.33|      null|United Kingdom|-13541.33|\n|  C537644|AMAZONFEE|     AMAZON FEE|      -1|2010-12-07 15:34:00| 13474.79|      null|United Kingdom|-13474.79|\n|  C580604|AMAZONFEE|     AMAZON FEE|      -1|2011-12-05 11:35:00|  11586.5|      null|United Kingdom| -11586.5|\n|  A563185|        B|Adjust bad debt|       1|2011-08-12 14:50:00| 11062.06|      null|United Kingdom| 11062.06|\n+---------+---------+---------------+--------+-------------------+---------+----------+--------------+---------+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1571331466235_1181761755","id":"20191015-145031_289172180","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:196"},{"text":"import org.apache.spark.sql.expressions.Window\nimport org.apache.spark.sql.functions._\n/*\nspark.sql(\"SELECT InvoiceNo, Amount, InvoiceDate, CustomerID, Country, \" +\n    \"RANK() OVER (PARTITION BY Country ORDER BY Amount DESC) rank \" +\n    \"FROM retail_view \" + \n    \"HAVING rank < 3\" ).\n    show(10)\n*/\n\n// DF solution*\nval wSpec = Window.partitionBy(\"Country\").orderBy(desc(\"Amount\"))\n\nval q3df = retailDf_R.select($\"InvoiceNo\",\n    ($\"Amount\").alias(\"Amount\"),\n    $\"InvoiceDate\",\n    $\"CustomerID\",\n    $\"Country\")\n    \nq3df.withColumn(\"rank\", rank().over(wSpec)).\n    where($\"rank\" < 3).\n    show(10)\n","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.expressions.Window\nimport org.apache.spark.sql.functions._\nwSpec: org.apache.spark.sql.expressions.WindowSpec = org.apache.spark.sql.expressions.WindowSpec@4f4b3df7\nq3df: org.apache.spark.sql.DataFrame = [InvoiceNo: string, Amount: double ... 3 more fields]\n+---------+-------+-------------------+----------+---------+----+\n|InvoiceNo| Amount|        InvoiceDate|CustomerID|  Country|rank|\n+---------+-------+-------------------+----------+---------+----+\n|   538848| 1188.0|2010-12-14 13:28:00|     17404|   Sweden|   1|\n|   566494|  792.0|2011-09-13 11:12:00|     17404|   Sweden|   2|\n|   571751|3949.32|2011-10-19 11:18:00|     12744|Singapore|   1|\n|   548813|2382.92|2011-04-04 13:03:00|     12744|Singapore|   2|\n|   569640|  876.0|2011-10-05 12:25:00|     12471|  Germany|   1|\n|   581179|  700.8|2011-12-07 15:43:00|     12471|  Germany|   2|\n|   571035|  38.25|2011-10-13 12:50:00|     12446|      RSA|   1|\n|   571035|   29.9|2011-10-13 12:50:00|     12446|      RSA|   2|\n|   573077|4161.06|2011-10-27 14:13:00|     12536|   France|   1|\n|   573080|4161.06|2011-10-27 14:20:00|     12536|   France|   1|\n+---------+-------+-------------------+----------+---------+----+\nonly showing top 10 rows\n\n"}]},"apps":[],"jobName":"paragraph_1571331466236_-521665827","id":"20191010-152641_364243002","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:197"},{"text":"%md\n\n#### Q4: Generate a daily and a weekly sales table and plot diagrams using Zeppelin built-in plot.\n\n\n```bash\ndailyDf.show(5)\n+-------------------+------------------+\n|              start|       sum(amount)|\n+-------------------+------------------+\n|2010-11-30 19:00:00|          58833.88|\n|2010-12-01 19:00:00| 45666.62999999999|\n|2010-12-02 19:00:00| 46161.11000000004|\n|2010-12-04 19:00:00|31383.949999999997|\n|2010-12-05 19:00:00| 53860.18000000004|\n+-------------------+------------------+\n```\n\n```bash\nweeklyDf.show(5)\n+-------------------+------------------+\n|              start|       sum(amount)|\n+-------------------+------------------+\n|2010-11-24 19:00:00| 58833.88000000002|\n|2010-12-01 19:00:00|         266320.76|\n|2010-12-08 19:00:00|234844.27999999997|\n|2010-12-15 19:00:00|177360.10999999993|\n|2010-12-22 19:00:00|11796.309999999992|\n+-------------------+------------------+\n```\n\nReadings\n- https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html\n- http://blog.madhukaraphatak.com/introduction-to-spark-two-part-5/","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Q4: Generate a daily and a weekly sales table and plot diagrams using Zeppelin built-in plot.</h4>\n<pre><code class=\"bash\">dailyDf.show(5)\n+-------------------+------------------+\n|              start|       sum(amount)|\n+-------------------+------------------+\n|2010-11-30 19:00:00|          58833.88|\n|2010-12-01 19:00:00| 45666.62999999999|\n|2010-12-02 19:00:00| 46161.11000000004|\n|2010-12-04 19:00:00|31383.949999999997|\n|2010-12-05 19:00:00| 53860.18000000004|\n+-------------------+------------------+\n</code></pre>\n<pre><code class=\"bash\">weeklyDf.show(5)\n+-------------------+------------------+\n|              start|       sum(amount)|\n+-------------------+------------------+\n|2010-11-24 19:00:00| 58833.88000000002|\n|2010-12-01 19:00:00|         266320.76|\n|2010-12-08 19:00:00|234844.27999999997|\n|2010-12-15 19:00:00|177360.10999999993|\n|2010-12-22 19:00:00|11796.309999999992|\n+-------------------+------------------+\n</code></pre>\n<p>Readings<br/>- <a href=\"https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html\">https://databricks.com/blog/2017/05/08/event-time-aggregation-watermarking-apache-sparks-structured-streaming.html</a><br/>- <a href=\"http://blog.madhukaraphatak.com/introduction-to-spark-two-part-5/\">http://blog.madhukaraphatak.com/introduction-to-spark-two-part-5/</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1571331466236_-1777967531","id":"20190520-140931_1510736707","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:198"},{"text":"// milad - df solution\nval dailyDf = retailDf_R.\n    groupBy(window($\"InvoiceDate\", \"1 day\")).\n    agg(sum($\"Amount\") as \"sum(amount)\").\n    select(\"window.start\", \"sum(amount)\").\n    orderBy($\"start\")\n\nval weeklyDf = retailDf_R.\n    groupBy(window($\"InvoiceDate\", \"1 week\")).\n    agg(sum($\"Amount\") as \"sum(amount)\").\n    select(\"window.start\", \"sum(amount)\").\n    orderBy($\"start\")\n","user":"anonymous","dateUpdated":"2019-10-22T16:12:16+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"dailyDf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [start: timestamp, sum(amount): double]\nweeklyDf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [start: timestamp, sum(amount): double]\n"}]},"apps":[],"jobName":"paragraph_1571331466237_-729564353","id":"20190520-181045_1661878813","dateCreated":"2019-10-17T16:57:46+0000","dateStarted":"2019-10-22T16:12:16+0000","dateFinished":"2019-10-22T16:12:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:199"},{"text":"// show daily and weekly sales\ndailyDf.show(5)\nweeklyDf.show(5)\n","user":"anonymous","dateUpdated":"2019-10-22T16:12:20+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1571756760830_334973229","id":"20191022-150600_550957131","dateCreated":"2019-10-22T15:06:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:200","dateFinished":"2019-10-22T16:12:25+0000","dateStarted":"2019-10-22T16:12:20+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+------------------+\n|              start|       sum(amount)|\n+-------------------+------------------+\n|2010-12-01 00:00:00| 58960.79000000025|\n|2010-12-02 00:00:00| 47748.37999999988|\n|2010-12-03 00:00:00| 46943.70999999988|\n|2010-12-05 00:00:00|31774.950000000164|\n|2010-12-06 00:00:00|54830.460000000014|\n+-------------------+------------------+\nonly showing top 5 rows\n\n+-------------------+------------------+\n|              start|       sum(amount)|\n+-------------------+------------------+\n|2010-11-25 00:00:00| 58960.79000000025|\n|2010-12-02 00:00:00|326305.68000000296|\n|2010-12-09 00:00:00|243804.23000000237|\n|2010-12-16 00:00:00| 182599.3300000008|\n|2010-12-23 00:00:00|12076.110000000024|\n+-------------------+------------------+\nonly showing top 5 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=19","http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=20"],"interpreterSettingId":"spark"}}},{"text":"// create daily and weekly sql views\ndailyDf.createOrReplaceTempView(\"dailySales\")\ndailyDf.createOrReplaceTempView(\"weeklySales\")","user":"anonymous","dateUpdated":"2019-10-22T16:12:29+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1571756759929_-434287339","id":"20191022-150559_1909986527","dateCreated":"2019-10-22T15:05:59+0000","dateStarted":"2019-10-22T16:12:30+0000","dateFinished":"2019-10-22T16:12:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:201"},{"text":"%sql\nselect to_date(start), `sum(amount)` from dailySales","user":"anonymous","dateUpdated":"2019-10-22T16:16:47+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"results":{"0":{"graph":{"mode":"lineChart","height":430,"optionOpen":true,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"to_date(dailysales.`start`)":"string","sum(amount)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default","lineWithFocus":false,"forceY":false},"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"pieChart":{}},"commonSetting":{},"keys":[{"name":"to_date(dailysales.`start`)","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"sum(amount)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"to_date(dailysales.`start`)\tsum(amount)\n2010-12-01\t58960.79000000025\n2010-12-02\t47748.37999999988\n2010-12-03\t46943.70999999988\n2010-12-05\t31774.950000000164\n2010-12-06\t54830.460000000014\n2010-12-07\t99618.20000000104\n2010-12-08\t45389.979999999814\n2010-12-09\t53586.18000000004\n2010-12-10\t59182.920000000246\n2010-12-12\t17329.070000000047\n2010-12-13\t38006.7100000001\n2010-12-14\t45254.730000000185\n2010-12-15\t30444.62000000013\n2010-12-16\t49352.89999999992\n2010-12-17\t45418.329999999965\n2010-12-19\t7534.909999999992\n2010-12-20\t26789.129999999983\n2010-12-21\t47304.08999999991\n2010-12-22\t6199.969999999998\n2010-12-23\t12076.110000000024\n2011-01-04\t16026.080000000014\n2011-01-05\t32634.470000000052\n2011-01-06\t40382.849999999875\n2011-01-07\t28836.590000000062\n2011-01-09\t15778.200000000024\n2011-01-10\t24569.069999999996\n2011-01-11\t68655.59000000016\n2011-01-12\t24693.77999999999\n2011-01-13\t20624.640000000003\n2011-01-14\t47576.90000000008\n2011-01-16\t7242.0599999999795\n2011-01-17\t29333.02000000029\n2011-01-18\t95978.05000000022\n2011-01-19\t25934.57000000013\n2011-01-20\t21246.99000000008\n2011-01-21\t32640.300000000203\n2011-01-23\t10400.249999999967\n2011-01-24\t25733.790000000135\n2011-01-25\t29077.470000000107\n2011-01-26\t19922.290000000085\n2011-01-27\t23730.840000000113\n2011-01-28\t20090.650000000016\n2011-01-30\t6615.749999999991\n2011-01-31\t23640.36000000011\n2011-02-01\t29034.990000000027\n2011-02-02\t21216.200000000026\n2011-02-03\t23479.830000000096\n2011-02-04\t25162.190000000046\n2011-02-06\t3457.1099999999965\n2011-02-07\t25955.009999999984\n2011-02-08\t20949.920000000042\n2011-02-09\t16692.579999999976\n2011-02-10\t14896.460000000008\n2011-02-11\t22873.099999999973\n2011-02-13\t5713.629999999991\n2011-02-14\t26703.510000000173\n2011-02-15\t39875.74000000006\n2011-02-16\t24949.100000000082\n2011-02-17\t26372.67000000019\n2011-02-18\t16208.749999999996\n2011-02-20\t9624.69000000003\n2011-02-21\t36388.75\n2011-02-22\t32498.350000000126\n2011-02-23\t26891.60000000015\n2011-02-24\t22809.8400000001\n2011-02-25\t20595.740000000005\n2011-02-27\t9526.499999999982\n2011-02-28\t21755.630000000187\n2011-03-01\t26354.96000000005\n2011-03-02\t18690.790000000015\n2011-03-03\t36404.00000000006\n2011-03-04\t19506.800000000105\n2011-03-06\t10005.369999999983\n2011-03-07\t32356.550000000214\n2011-03-08\t25081.620000000177\n2011-03-09\t22038.8400000001\n2011-03-10\t26120.220000000114\n2011-03-11\t25475.180000000102\n2011-03-13\t4148.119999999994\n2011-03-14\t26019.550000000065\n2011-03-15\t23493.490000000016\n2011-03-16\t21948.360000000048\n2011-03-17\t39904.94000000001\n2011-03-18\t28171.790000000023\n2011-03-20\t22153.490000000103\n2011-03-21\t16715.52000000003\n2011-03-22\t31515.580000000227\n2011-03-23\t24091.670000000096\n2011-03-24\t36697.1400000001\n2011-03-25\t31394.210000000065\n2011-03-27\t9241.349999999995\n2011-03-28\t23176.720000000074\n2011-03-29\t70711.9199999998\n2011-03-30\t31885.280000000148\n2011-03-31\t34335.90000000016\n2011-04-01\t25667.510000000064\n2011-04-03\t6943.149999999999\n2011-04-04\t33254.240000000165\n2011-04-05\t30144.770000000135\n2011-04-06\t17362.360000000062\n2011-04-07\t18512.890000000123\n2011-04-08\t25295.640000000105\n2011-04-10\t9913.979999999976\n2011-04-11\t22353.270000000073\n2011-04-12\t25570.30000000009\n2011-04-13\t24484.42000000002\n2011-04-14\t36104.07000000007\n2011-04-15\t28334.120999999977\n2011-04-17\t12725.499999999993\n2011-04-18\t56026.1799999997\n2011-04-19\t24338.700000000194\n2011-04-20\t28670.47000000003\n2011-04-21\t32615.63000000008\n2011-04-26\t31047.430000000168\n2011-04-27\t25942.44000000003\n2011-04-28\t22501.55000000007\n2011-05-01\t6973.659999999997\n2011-05-03\t35229.41000000006\n2011-05-04\t27544.150000000103\n2011-05-05\t29174.290000000245\n2011-05-06\t36126.35000000002\n2011-05-08\t18867.400000000045\n2011-05-09\t27899.710000000185\n2011-05-10\t47819.979999999836\n2011-05-11\t33687.25000000023\n2011-05-12\t61903.08999999985\n2011-05-13\t30749.95000000008\n2011-05-15\t9924.280000000004\n2011-05-16\t39651.279999999904\n2011-05-17\t55151.98999999986\n2011-05-18\t34483.44000000009\n2011-05-19\t35599.350000000035\n2011-05-20\t26718.170000000067\n2011-05-22\t24231.090000000066\n2011-05-23\t34685.600000000115\n2011-05-24\t37660.040000000045\n2011-05-25\t24408.120000000094\n2011-05-26\t33497.03000000001\n2011-05-27\t28442.030000000093\n2011-05-29\t7394.299999999987\n2011-05-31\t22714.06000000007\n2011-06-01\t20595.690000000133\n2011-06-02\t32826.14000000016\n2011-06-03\t16913.25000000001\n2011-06-05\t25639.540000000114\n2011-06-06\t17789.070000000032\n2011-06-07\t37957.72000000005\n2011-06-08\t43264.32999999978\n2011-06-09\t46389.10000000024\n2011-06-10\t62234.43999999992\n2011-06-12\t12517.05999999999\n2011-06-13\t22457.210000000076\n2011-06-14\t40474.01000000002\n2011-06-15\t49097.98999999993\n2011-06-16\t34584.68000000005\n2011-06-17\t21076.170000000042\n2011-06-19\t22442.180000000102\n2011-06-20\t37514.980000000025\n2011-06-21\t24784.370000000068\n2011-06-22\t21825.990000000056\n2011-06-23\t25242.82000000014\n2011-06-24\t19521.959999999995\n2011-06-26\t7082.489999999984\n2011-06-27\t17015.76\n2011-06-28\t35607.32000000011\n2011-06-29\t22088.32000000003\n2011-06-30\t44797.3100000001\n2011-07-01\t13675.060000000016\n2011-07-03\t6032.389999999991\n2011-07-04\t44652.83000000023\n2011-07-05\t40758.430000000124\n2011-07-06\t26387.540000000135\n2011-07-07\t32445.710000000126\n2011-07-08\t27082.10000000013\n2011-07-10\t5993.869999999983\n2011-07-11\t22605.020000000124\n2011-07-12\t26262.550000000083\n2011-07-13\t22641.94000000011\n2011-07-14\t33602.13000000016\n2011-07-15\t14836.429999999935\n2011-07-17\t17194.560000000034\n2011-07-18\t38831.61000000003\n2011-07-19\t50182.830000000075\n2011-07-20\t33308.24000000013\n2011-07-21\t32818.54\n2011-07-22\t20124.85999999998\n2011-07-24\t27099.460000000043\n2011-07-25\t26887.150000000187\n2011-07-26\t21644.261000000057\n2011-07-27\t25602.930000000106\n2011-07-28\t56269.740000000034\n2011-07-29\t18790.400000000005\n2011-07-31\t33490.609999999986\n2011-08-01\t21388.92000000002\n2011-08-02\t26580.600000000046\n2011-08-03\t28113.140000000178\n2011-08-04\t65502.21000000006\n2011-08-05\t21538.580000000093\n2011-08-07\t7578.9099999999935\n2011-08-08\t23377.650000000107\n2011-08-09\t27679.440000000082\n2011-08-10\t28792.34000000012\n2011-08-11\t72433.79000000004\n2011-08-12\t10107.229999999961\n2011-08-14\t5718.569999999994\n2011-08-15\t17243.970000000005\n2011-08-16\t19239.660000000036\n2011-08-17\t53499.95999999992\n2011-08-18\t54106.929999999964\n2011-08-19\t17349.589999999993\n2011-08-21\t14576.860000000008\n2011-08-22\t29651.460000000025\n2011-08-23\t25993.68000000007\n2011-08-24\t49035.36000000006\n2011-08-25\t23827.46000000006\n2011-08-26\t25626.439999999977\n2011-08-28\t10805.029999999977\n2011-08-30\t31866.31000000011\n2011-08-31\t25380.170000000056\n2011-09-01\t37370.15000000005\n2011-09-02\t42322.02000000003\n2011-09-04\t17119.589999999993\n2011-09-05\t37157.14\n2011-09-06\t28349.910000000065\n2011-09-07\t34413.530000000115\n2011-09-08\t27195.8000000001\n2011-09-09\t30075.620000000064\n2011-09-11\t35511.6700000001\n2011-09-12\t29738.330000000104\n2011-09-13\t55117.05000000006\n2011-09-14\t23592.980000000152\n2011-09-15\t78218.9500000001\n2011-09-16\t27724.220000000034\n2011-09-18\t15745.73000000003\n2011-09-19\t49269.88000000002\n2011-09-20\t109612.02999999994\n2011-09-21\t48560.67999999983\n2011-09-22\t59354.790000000045\n2011-09-23\t40601.75000000006\n2011-09-25\t31372.661000000113\n2011-09-26\t29335.171000000108\n2011-09-27\t36322.94999999988\n2011-09-28\t43749.05999999986\n2011-09-29\t46401.450000000084\n2011-09-30\t44357.05999999993\n2011-10-02\t11634.530000000013\n2011-10-03\t66376.81999999999\n2011-10-04\t48810.64999999989\n2011-10-05\t75593.62999999982\n2011-10-06\t62891.18999999994\n2011-10-07\t53790.69999999985\n2011-10-09\t12524.400000000005\n2011-10-10\t48239.180000000044\n2011-10-11\t52572.94000000002\n2011-10-12\t32159.28000000021\n2011-10-13\t37446.180000000044\n2011-10-14\t36347.63999999996\n2011-10-16\t22010.96000000007\n2011-10-17\t52062.19999999996\n2011-10-18\t45332.160000000076\n2011-10-19\t42573.35999999984\n2011-10-20\t61122.89999999961\n2011-10-21\t63226.63999999999\n2011-10-23\t12339.160000000013\n2011-10-24\t48752.90999999974\n2011-10-25\t41314.640000000014\n2011-10-26\t38059.42999999994\n2011-10-27\t57291.71999999992\n2011-10-28\t40565.70000000003\n2011-10-30\t34571.23000000011\n2011-10-31\t57369.15000000012\n2011-11-01\t29155.150000000176\n2011-11-02\t45888.339999999815\n2011-11-03\t63561.48999999997\n2011-11-04\t62977.35999999984\n2011-11-06\t42946.34000000018\n2011-11-07\t85881.81000000011\n2011-11-08\t57700.239999999874\n2011-11-09\t66127.56999999963\n2011-11-10\t71008.26\n2011-11-11\t55257.170000000006\n2011-11-13\t34069.92000000007\n2011-11-14\t114419.88999999991\n2011-11-15\t60807.28999999987\n2011-11-16\t65958.17000000013\n2011-11-17\t61103.12999999976\n2011-11-18\t51275.39000000008\n2011-11-20\t35058.57000000019\n2011-11-21\t49805.71999999979\n2011-11-22\t64089.81999999992\n2011-11-23\t80104.1799999997\n2011-11-24\t50978.62999999997\n2011-11-25\t50822.73000000001\n2011-11-27\t20611.08000000008\n2011-11-28\t57165.18999999993\n2011-11-29\t72595.93000000002\n2011-11-30\t60126.95999999983\n2011-12-01\t52197.24999999973\n2011-12-02\t57664.06999999986\n2011-12-04\t24621.43000000009\n2011-12-05\t88741.96000000046\n2011-12-06\t56713.210000000145\n2011-12-07\t75439.15999999965\n2011-12-08\t82494.99999999972\n2011-12-09\t200920.60000000033\n"}]},"apps":[],"jobName":"paragraph_1571331466237_-1232280973","id":"20190520-140933_785400989","dateCreated":"2019-10-17T16:57:46+0000","dateStarted":"2019-10-22T16:14:02+0000","dateFinished":"2019-10-22T16:14:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:202","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://mazh-jrvs-bootcamp-m.us-east1-b.c.rich-suprstate-244018.internal:4040/jobs/job?id=22"],"interpreterSettingId":"spark"}}},{"text":"","user":"anonymous","dateUpdated":"2019-10-17T16:57:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------+------------------+\n|              start|       sum(amount)|\n+-------------------+------------------+\n|2010-11-24 19:00:00| 58833.88000000002|\n|2010-12-01 19:00:00|         266320.76|\n|2010-12-08 19:00:00|234844.27999999997|\n|2010-12-15 19:00:00|177360.10999999993|\n|2010-12-22 19:00:00|11796.309999999992|\n+-------------------+------------------+\nonly showing top 5 rows\n\nweeklySalesDf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [start: timestamp, sum(amount): double]\n"}]},"apps":[],"jobName":"paragraph_1571331466238_-1915800763","id":"20190520-140933_428817963","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:203"},{"text":"%sql\n","user":"anonymous","dateUpdated":"2019-10-22T15:42:54+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/sql","fontSize":9,"results":{"0":{"graph":{"mode":"lineChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"to_date(weeklysales.`start`)":"string","sum(amount)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"to_date(weeklysales.`start`)","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"sum(amount)","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"to_date(weeklysales.`start`)\tsum(amount)\n2010-11-24\t58833.88000000002\n2010-12-01\t266320.76\n2010-12-08\t234844.27999999997\n2010-12-15\t177360.10999999993\n2010-12-22\t11796.309999999992\n2010-12-29\t13729.059999999998\n2011-01-05\t196304.22999999995\n2011-01-12\t149317.07000000027\n2011-01-19\t137741.20000000004\n2011-01-26\t118809.36000000002\n2011-02-02\t117429.22000000006\n2011-02-09\t128847.81000000004\n2011-02-16\t138099.13000000003\n2011-02-23\t116085.18999999996\n2011-03-02\t147615.44000000015\n2011-03-09\t122114.17999999996\n2011-03-16\t150047.39000000004\n2011-03-23\t219388.9\n2011-03-30\t132980.16000000003\n2011-04-06\t123609.12000000005\n2011-04-13\t161846.1409999998\n2011-04-20\t87374.70000000004\n2011-04-27\t75286.71999999997\n2011-05-04\t189260.63000000006\n2011-05-11\t215677.61000000013\n2011-05-18\t176879.23999999993\n2011-05-25\t110808.24000000008\n2011-06-01\t172149.95999999996\n2011-06-08\t187264.3100000001\n2011-06-15\t155310.8099999999\n2011-06-22\t112595.35999999997\n2011-06-29\t173752.81\n2011-07-06\t123823.4900000001\n2011-07-13\t169295.00999999995\n2011-07-20\t152603.38100000005\n2011-07-27\t171116.80000000002\n2011-08-03\t163875.63999999987\n2011-08-10\t160414.12000000002\n2011-08-17\t188864.5300000001\n2011-08-24\t106552.79000000001\n2011-08-31\t195082.47000000012\n2011-09-07\t198719.58\n2011-09-14\t306781.53000000014\n2011-09-21\t235491.70199999987\n2011-09-28\t286780.8100000002\n2011-10-05\t226603.03000000014\n2011-10-12\t222388.63000000003\n2011-10-19\t253114.09999999998\n2011-10-26\t247555.6999999997\n2011-11-02\t355058.8800000002\n2011-11-09\t394675.79999999993\n2011-11-16\t332354.05000000016\n2011-11-23\t306160.31\n2011-11-30\t320118.69999999984\n2011-12-07\t113549.30999999985\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1571331466238_2047834264","id":"20190520-212256_1274740776","dateCreated":"2019-10-17T16:57:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:204"}],"name":"Jarvis/2-DataFrame_milad","id":"2ERYVG7UG","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}